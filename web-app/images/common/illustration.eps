%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (Joop Lucas) ()%%Title: (HealthcareAndMedicine.eps)%%CreationDate: 12/7/10 11:55 AM%%BoundingBox: 11 41 598 795%%HiResBoundingBox: 11.6128 41.2412 597.0625 794.209%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registratie])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3887 298.5 420.3887%AI3_TileBox: 18.311 41.1172 577.3105 824.1172%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 623.6221 813.5433%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI8_OpenToView: -501 974.8887 1 1643 1119 18 1 0 169 75 0 0%AI5_OpenViewLayers: 77%%PageOrigin:-68 -137%AI7_GridSettings: 14.1732 1 14.1732 1 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Overvloeiingen insteekmodule) (Live Blends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Overtrekken) (Suite Overtrekken.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Verstrooiingspenseel insteekmodule) (Verstrooiingspenseel.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Verstrooiingspenseel insteekmodule) (Verstrooiingspenseel.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flakkering.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Insteekmodule Kalligrafisch penseel Adobe) (Kalligrafisch penseel.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Patroonpenseel insteekmodule) (Kunstpenseel.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Patroonpenseel insteekmodule) (Kunstpenseel.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Kunstpenseel insteekmodule) (Kunstpenseel.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Kunstpenseel insteekmodule) (Kunstpenseel.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symboolgereedschap) (Symbolism.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Samengestelde vorm Adobe) (Pathfinder-suite.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Insteekmodule Omhulsel Adobe ) (Envelop en kromtrekken.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe-insteekmodule Actieve verf) (Live Paint.aip)%AI5_End_NonPrinting--1 Bn%AI5_BeginGradient: (Unnamed gradient 24)(Unnamed gradient 24) 1 2 Bd[<44434241403E3D3C3B3A383736343332302F2E2D2C2B2A29282625242221201F1D1C1B1A191817151412110F0E0C0B0A090706050403010000><333231302F2E2D2C2B2A29282726252423232221201F1E1E1D1C1B1A19181716151413131211100F0E0D0C0B0A090807060505040302010000><302F2F2E2D2D2C2B2A29282726252423222121201F1E1D1C1B1B1A19171615151413121110100F0E0D0C0B0A0A090807060505040302010000>0<C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>4 %_Br[0.266667 0.2 0.188235 0 0.776471 0.776471 0.776471 2 50 0 %_BS%_0.266667 0.2 0.188235 0 0.776471 0.776471 0.776471 2 50 0 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Lineair verloop 1)(Lineair verloop 1) 0 2 Bd[<0000010304050607090A0B0C0E0F111214151718191A1B1C1D1F2021222324252628292A2B2C2D2D2E2F303233343637383A3B3C3D3E3F41424344454647494A4B4C4D4E4F5051525354565758595A5C5D5E6061626365666768696A6B6C6D6E6F707172747576777879797A7B7C7D7E7F80818181828384848586878788898A8B8B8C8D8E8F9090919292939494959696979899999A9B9B9C9D9D9E9E9FA0A0A1A1A2A2A3A4A4A5A5A6A7A7A8A8A9A9AAAAABABACACADAEAEAFAFB0B0B0B1B1B2B2B1B1B2B2B3B3B4B4B5B6B7B7B8B8B9B9B9BABABABBBBBCBCBDBDBEBFBFC0C0C1C1C2C3C3C4C4C4><0000010203040505060708090A0B0C0D0E0F10111213131415161718191A1A1B1C1D1E1F20202123232425262728292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3E3F4042434445464647494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6060616263646566676768696A6B6C6D6E6E6F7071717273747475767778797A7A7B7C7D7D7E7F7F80818182838484858686878888898A8A8B8C8D8D8E8F8F9090919292939494959596979798999A9A9B9C9C9D9E9E9E9FA0A0A1A1A2A3A3A4A5A6A6A7A8A9AAABABACADADAEAFAFB0B1B2B2B3B4B5B6B7B7B8B9BABBBCBDBEBFBFC0><0000010203040505060708090A0A0B0C0D0E0F10101112131415151617161718191A1B1C1C1D1E1F20202122232425262728292A2B2B2C2D2E2E2F3031313233343536373838393A3B3C3D3D3E3F4041424445464647484748494A4B4C4D4E4F5050515253545556565758595A5A5B5C5D5D5E5F5F60616262636464656666676768696A6B6C6C6D6E6F6F707071727273727373747475767677787879797A7A7B7C7C7D7D7E7E7F808081818282838384858586868787888889898A8A8B8B8C8C8D8E8E8F8F90909191929090919192929393949495959596969797989899999A9B9B9C9D9D9E9E9F><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010102020203030404040505060607080809090A0B0C0C0D0E0F1011121314161718191A1B1C1E1F20212224242527282A2B2C2E2F3132343537393A3C3D3F41434446484A4B4D4F51535557595B5D5F61636567696A6C6D6F717375787A7C7E80838587898C8D8F919396989B9D9FA2A4A6A9ABADB0B2B5B7B9BCBEC0C3C5C8CACCCECF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776757473727171706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Lineair verloop 2)(Lineair verloop 2) 0 6 Bd[<C3C4C4C4C4C4C5C5C6C6C6C7C7C7C8C8C8C8C9C9C9C9C9C9CACACACBCBCBCCCDCDCECECECECFCFCFCFD0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D3D3D3D4D4D4D5D5D5D5D6D6D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D8D8D9D9D9D9D9D9DAD9D9D9DADADADADADADADBDADBDADADADADADADADBDBDBDBDBDBDBDBDBDBDBDBDBDADADADADADAD9D9D9D9D9D9D9D9D9D9D9D8D9D8D8D8D8><2A2C2E2E30323436393B3B3C3E41434547494B4D4D4F51535557595B5D5F61636668696B6D6F71737577797B7D7F81838587888A8C8C8E8F9192949697999A9C9D9E9FA0A2A3A4A5A7A8A9AAABACAEAFB0B1B2B3B3B4B5B6B7B8B9B9BABBBCBDBEBFC0C1C1C2C3C4C4C5C6C6C7C7C8C9C9CACACBCBCCCDCDCDCECECFCFD0D0D0D1D1D2D2D2D2D3D3D3D4D4D4D4D5D5D5D5D5D5D5D6D6D6><201F1D1D1C1B1A1815141412110F0E0C0A0907060602010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8E8E8E8E8E8E8E8F8F8F8F8F8F90909090909091919192929292929393939494949494959595959696969797989899999999999A9A9B9A9B9B9C9C9C9D9D9D9D9D9D9E9E9E9F9F9FA0A0A0A0A1A1A1A1A2A2A2A2A3A3A3A3A4A3A4A4A5A5A5A5A6A6A6A6A7A7A7A7A7A8A8A8A8A9A9A9A9AAAAAAAAABABACACACADACADADAEAEAEAFAFAFAFB0B0B0B0B0B1B1B2B2B2B3B3B4B4B4B4B4B5B5B6B6B6B6B7B7B7B8B8B8B8B9B9B9B9B9BABABABABABABBBBBBBBBBBCBCBDBDBEBEBEBEBEBEBEBFBFC0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010303050508080B0B0E0F0F1212141517171A1A1C1D1F1F2122242427272A2A><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFDFCFBFBFAF9F9F8F6F6F6F5F4F3F2F1EFEFEFEEEDECEBEBEAE9E8E6E6E5E4E3E2E2E1E0DFDDDDDCDAD9D7D7D7D6D5D4D3D2D2D1D0CECDCCCACAC9C7C6C5C4C3C3C2C1C0BFBDBCBBBBBAB8B7B5B4B3B2B1B1AFAEADACABAAA9A7A6A6A4A3A2A1A09E9D9C9B99989896959492918F8E8D8B8A888785838382807F7D7C7A7877757372706E6C6B696766646260605E5C5A58565452504E4C4A474643423E3D3A383534302F2B2A27252220>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0000000002030507090A0C0E1012131517181A1C1D1F202123252628292B2C2E2F303133353637393A3C3D3E3F41414243454647494A4C4D4E4F51525354555658595A5C5D5E5F5F60616263646566676869696A6B6C6D6E6E6F6F7071717273737475767676777878797A7A7B7C7C7C7D7E7E7F7F8080818081818283838484858586868787878788888989898A8B8B8B8C8C8D8D8D8D8D8E><4949474644444341403E3E3D3B3A383735343330302E2D2C2A2927262522221F1E1E1B1B181716131310100F0C0B0A09080504030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><EDEDEEEEEEEEEFEFEFF0F0F0F0F0F1F0F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F3F2F3F3F3F3F3F3F3F2F2F3F2F2F1F1F1F0F0F0EFEFEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F1F1F1F2F2F3F3F3F4F5F5F5F6F6F7F7F8F8F8F9F9FAFAFAFBFBFBFCFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9C9B9A9997969594939291908F8E8D8C8A8988868585848281807F7D7C7B7A78777776757372706F6F6E6D6B6A6969676665636362615F5E5E5C5B5B595856565554545251514F4F4E4E4C4C4B4B4949><F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECEDEDEDED>01<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEDEDEDEDECECECEBEBEBEBEAEAE9E9E8E8E8E8E7E7E6E6E5E5E5E4E4E3E3E2E2E2E1E0E0DFDFDFDEDEDDDDDCDCDBDBDADAD9D9D8D7D7D7D6D5D5D5D4D3D2D2D2D1D1D0CFCFCECECDCDCCCBCBCAC9C9C8C8C7C6C6C5C4C4C4C4C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B5B5B4B4B3B3B2B2B0B0AFAFAEAEAEADADACACACABABAAAAAAA9A9A8A8A8A7A7A7A6A6A6A5A5A5A4A4A4A3A3A3A3A2A2A2A2A1A1A1A1A0A0A0A0A09F9F9F9F9F9E9E9E9E9E9E9E9E9C9C9C9C9C9C9C9C9C><EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0>01<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.847059 0.839216 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.847059 0.839216 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.764706 0.164706 0.12549 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.764706 0.164706 0.12549 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.556863 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.556863 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.286274 0.929412 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.286274 0.929412 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.611765 0.941176 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.611765 0.941176 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.945098 0.937255 0 1 0 0 2 33.3333 0 %_BS%_0 0.945098 0.937255 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radiaal verloop 1)(Radiaal verloop 1) 1 2 Bd[<0000010304050607090A0B0C0E0F111214151718191A1B1C1D1F2021222324252628292A2B2C2D2D2E2F303233343637383A3B3C3D3E3F41424344454647494A4B4C4D4E4F5051525354565758595A5C5D5E6061626365666768696A6B6C6D6E6F707172747576777879797A7B7C7D7E7F80818181828384848586878788898A8B8B8C8D8E8F9090919292939494959696979899999A9B9B9C9D9D9E9E9FA0A0A1A1A2A2A3A4A4A5A5A6A7A7A8A8A9A9AAAAABABACACADAEAEAFAFB0B0B0B1B1B2B2B1B1B2B2B3B3B4B4B5B6B7B7B8B8B9B9B9BABABABBBBBCBCBDBDBEBFBFC0C0C1C1C2C3C3C4C4C4><0000010203040505060708090A0B0C0D0E0F10111213131415161718191A1A1B1C1D1E1F20202123232425262728292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3E3F4042434445464647494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6060616263646566676768696A6B6C6D6E6E6F7071717273747475767778797A7A7B7C7D7D7E7F7F80818182838484858686878888898A8A8B8C8D8D8E8F8F9090919292939494959596979798999A9A9B9C9C9D9E9E9E9FA0A0A1A1A2A3A3A4A5A6A6A7A8A9AAABABACADADAEAFAFB0B1B2B2B3B4B5B6B7B7B8B9BABBBCBDBEBFBFC0><0000010203040505060708090A0A0B0C0D0E0F10101112131415151617161718191A1B1C1C1D1E1F20202122232425262728292A2B2B2C2D2E2E2F3031313233343536373838393A3B3C3D3D3E3F4041424445464647484748494A4B4C4D4E4F5050515253545556565758595A5A5B5C5D5D5E5F5F60616262636464656666676768696A6B6C6C6D6E6F6F707071727273727373747475767677787879797A7A7B7C7C7D7D7E7E7F808081818282838384858586868787888889898A8A8B8B8C8C8D8E8E8F8F90909191929090919192929393949495959596969797989899999A9B9B9C9D9D9E9E9F><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010102020203030404040505060607080809090A0B0C0C0D0E0F1011121314161718191A1B1C1E1F20212224242527282A2B2C2E2F3132343537393A3C3D3F41434446484A4B4D4F51535557595B5D5F61636567696A6C6D6F717375787A7C7E80838587898C8D8F919396989B9D9FA2A4A6A9ABADB0B2B5B7B9BCBEC0C3C5C8CACCCECF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776757473727171706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radiaal verloop 2)(Radiaal verloop 2) 1 6 Bd[0<F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEDEDEDEDECECECEBEBEBEBEAEAE9E9E8E8E8E8E7E7E6E6E5E5E5E4E4E3E3E2E2E2E1E0E0DFDFDFDEDEDDDDDCDCDBDBDADAD9D9D8D7D7D7D6D5D5D5D4D3D2D2D2D1D1D0CFCFCECECDCDCCCBCBCAC9C9C8C8C7C6C6C5C4C4C4C4C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B5B5B4B4B3B3B2B2B0B0AFAFAEAEAEADADACACACABABAAAAAAA9A9A8A8A8A7A7A7A6A6A6A5A5A5A4A4A4A3A3A3A3A2A2A2A2A1A1A1A1A0A0A0A0A09F9F9F9F9F9E9E9E9E9E9E9E9E9C9C9C9C9C9C9C9C9C><EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0>01<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9C9B9A9997969594939291908F8E8D8C8A8988868585848281807F7D7C7B7A78777776757372706F6F6E6D6B6A6969676665636362615F5E5E5C5B5B595856565554545251514F4F4E4E4C4C4B4B4949><F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECEDEDEDED>01<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0000000002030507090A0C0E1012131517181A1C1D1F202123252628292B2C2E2F303133353637393A3C3D3E3F41414243454647494A4C4D4E4F51525354555658595A5C5D5E5F5F60616263646566676869696A6B6C6D6E6E6F6F7071717273737475767676777878797A7A7B7C7C7C7D7E7E7F7F8080818081818283838484858586868787878788888989898A8B8B8B8C8C8D8D8D8D8D8E><4949474644444341403E3E3D3B3A383735343330302E2D2C2A2927262522221F1E1E1B1B181716131310100F0C0B0A09080504030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><EDEDEEEEEEEEEFEFEFF0F0F0F0F0F1F0F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F3F2F3F3F3F3F3F3F3F2F2F3F2F2F1F1F1F0F0F0EFEFEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F1F1F1F2F2F3F3F3F4F5F5F5F6F6F7F7F8F8F8F9F9FAFAFAFBFBFBFCFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8E8E8E8E8E8E8E8F8F8F8F8F8F90909090909091919192929292929393939494949494959595959696969797989899999999999A9A9B9A9B9B9C9C9C9D9D9D9D9D9D9E9E9E9F9F9FA0A0A0A0A1A1A1A1A2A2A2A2A3A3A3A3A4A3A4A4A5A5A5A5A6A6A6A6A7A7A7A7A7A8A8A8A8A9A9A9A9AAAAAAAAABABACACACADACADADAEAEAEAFAFAFAFB0B0B0B0B0B1B1B2B2B2B3B3B4B4B4B4B4B5B5B6B6B6B6B7B7B7B8B8B8B8B9B9B9B9B9BABABABABABABBBBBBBBBBBCBCBDBDBEBEBEBEBEBEBEBFBFC0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010303050508080B0B0E0F0F1212141517171A1A1C1D1F1F2122242427272A2A><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFDFCFBFBFAF9F9F8F6F6F6F5F4F3F2F1EFEFEFEEEDECEBEBEAE9E8E6E6E5E4E3E2E2E1E0DFDDDDDCDAD9D7D7D7D6D5D4D3D2D2D1D0CECDCCCACAC9C7C6C5C4C3C3C2C1C0BFBDBCBBBBBAB8B7B5B4B3B2B1B1AFAEADACABAAA9A7A6A6A4A3A2A1A09E9D9C9B99989896959492918F8E8D8B8A888785838382807F7D7C7A7877757372706E6C6B696766646260605E5C5A58565452504E4C4A474643423E3D3A383534302F2B2A27252220>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C3C4C4C4C4C4C5C5C6C6C6C7C7C7C8C8C8C8C9C9C9C9C9C9CACACACBCBCBCCCDCDCECECECECFCFCFCFD0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D3D3D3D4D4D4D5D5D5D5D6D6D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D8D8D9D9D9D9D9D9DAD9D9D9DADADADADADADADBDADBDADADADADADADADBDBDBDBDBDBDBDBDBDBDBDBDBDADADADADADAD9D9D9D9D9D9D9D9D9D9D9D8D9D8D8D8D8><2A2C2E2E30323436393B3B3C3E41434547494B4D4D4F51535557595B5D5F61636668696B6D6F71737577797B7D7F81838587888A8C8C8E8F9192949697999A9C9D9E9FA0A2A3A4A5A7A8A9AAABACAEAFB0B1B2B3B3B4B5B6B7B8B9B9BABBBCBDBEBFC0C1C1C2C3C4C4C5C6C6C7C7C8C9C9CACACBCBCCCDCDCDCECECFCFD0D0D0D1D1D2D2D2D2D3D3D3D4D4D4D4D5D5D5D5D5D5D5D6D6D6><201F1D1D1C1B1A1815141412110F0E0C0A0907060602010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.945098 0.937255 0 1 0 0 2 33.3333 0 %_BS%_0 0.945098 0.937255 0 1 0 0 2 33.3333 0 Bs0 0.611765 0.941176 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.611765 0.941176 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.286274 0.929412 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.286274 0.929412 0 1 0.74902 0 2 47.0588 40.4192 Bs0.556863 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.556863 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.764706 0.164706 0.12549 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.764706 0.164706 0.12549 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.847059 0.839216 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.847059 0.839216 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Patroon)(Patroon) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.729412 0.709804 0.635294 0.760784 0.137255 0.121569 0.12549 Xa 0.729412 0.709804 0.635294 0.760784 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.070588 0 0.698039 0 1 1 0.4 Xa 0.070588 0 0.698039 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.513725 0.909804 0 0.968627 0.576471 0.117647 Xa 0 0.513725 0.909804 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0 0.933333 0.886274 0 0.929412 0.12549 0.141176 Xa 0 0.933333 0.886274 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.729412 0.709804 0.635294 0.760784 0.137255 0.121569 0.12549 Xa 0.729412 0.709804 0.635294 0.760784 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.52549 0 0.870588 0 0.54902 0.776471 0.247059 Xa 0.52549 0 0.870588 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.709804 0.141176 0 0 0.160784 0.670588 0.886275 Xa 0.709804 0.141176 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.231373 0 0.886274 0 0.85098 0.878431 0.129412 Xa 0.231373 0 0.886274 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.52549 0.92549 0 0 0.576471 0.152941 0.560784 Xa 0.52549 0.92549 0 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.647059 0 0 0 0.2 0.776471 0.956863 Xa 0.647059 0 0 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.070588 0 0.698039 0 1 1 0.4 Xa 0.070588 0 0.698039 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.85098 0 0 1 0.2 0.6 Xa 0 0.85098 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7892.8833 8611.8447 m-7801.0479 8611.8447 L-7801.0479 8607.5654 L-7892.8833 8607.5654 L-7892.8833 8611.8447 Ln0 O0.729412 0.709804 0.635294 0.760784 0.137255 0.121569 0.12549 Xa-7892.6631 8609.165 m-7893 8609.2314 -7892.4814 8609.4209 -7892.8833 8609.2783 C-7892.8379 8609.1602 -7892.7725 8609.0713 -7892.6631 8609.165 Cf-7802.1675 8609.3311 m-7803.2529 8610.0938 -7804.6816 8609.3232 -7805.8701 8609.8096 C-7806.0098 8609.8418 -7805.8354 8609.3916 -7806.1484 8609.4922 C-7807.3008 8610.085 -7809.1162 8609.7314 -7810.5195 8609.2744 C-7810.4346 8609.1563 L-7810.7021 8609.0713 -7811.0283 8609.4609 -7811.3115 8609.4072 C-7811.3135 8609.3281 -7811.2207 8609.2959 -7811.2861 8609.1865 C-7811.3574 8609.4248 -7811.7979 8609.2979 -7811.9189 8609.4736 C-7812.0303 8609.3818 -7812.0195 8609.1943 -7812.1641 8609.0898 C-7812.3262 8609.3594 L-7812.7769 8609.999 -7813.4209 8609.3154 -7814.0361 8609.6455 C-7814.0063 8609.583 -7813.9453 8609.5342 -7813.9941 8609.4736 C-7814.9814 8609.8623 -7816.2168 8609.7891 -7817.3208 8609.9326 C-7817.2769 8609.8369 -7817.2363 8609.665 -7817.3008 8609.5576 C-7817.3555 8609.8408 -7817.6963 8609.9121 -7817.9922 8609.9678 C-7818.1255 8609.6768 -7818.4995 8610.2334 -7818.8467 8610.0723 C-7818.8169 8610.0088 L-7819.0732 8610.3135 -7819.1973 8609.833 -7819.4053 8610.1982 C-7819.5684 8609.9697 L-7819.6807 8610.3799 -7819.9395 8609.7568 -7820.1514 8609.9658 C-7820.1445 8610.0498 L-7820.3442 8610.1494 -7820.4482 8609.9434 -7820.6338 8610.0127 C-7820.6514 8609.9658 L-7821.0854 8610.0723 -7821.3379 8609.8447 -7821.3271 8610.165 C-7821.4795 8609.9082 -7820.9063 8610.0479 -7821.1455 8609.6738 C-7822.5732 8610.0049 -7824.0459 8609.9395 -7825.4834 8609.9463 C-7825.6465 8609.8174 -7825.7505 8609.7783 -7825.7871 8609.6563 C-7825.9307 8609.7217 -7826.3281 8609.7158 -7826.4585 8609.8799 C-7826.4102 8609.873 -7826.5513 8609.7158 -7826.6274 8609.7002 C-7826.8887 8609.5791 -7826.9131 8610.0518 -7827.2002 8609.9082 C-7827.0859 8609.8232 -7827.0469 8609.7197 -7827.0854 8609.6006 C-7827.3301 8609.8506 -7827.6577 8609.8105 -7827.9473 8609.8906 C-7827.9023 8609.8369 -7827.8325 8609.8057 -7827.8433 8609.7041 C-7828.1602 8609.9873 -7828.4209 8609.6455 -7828.6982 8609.8242 C-7828.5947 8609.6396 L-7829.0415 8609.415 -7828.7266 8610.0264 -7829.1128 8609.8936 C-7829.02 8609.835 -7829.0527 8609.7617 -7829.0361 8609.6865 C-7829.3965 8610.0234 -7829.9795 8609.9121 -7830.3389 8610.0264 C-7830.3174 8610.001 -7830.3232 8609.9502 Y-7830.7148 8609.9922 -7831.1245 8609.8877 -7831.5552 8610.0342 C-7831.7119 8609.9521 -7831.5039 8609.583 -7831.9185 8609.6514 C-7831.9033 8610.0225 -7832.6221 8609.8037 -7832.3779 8610.2236 C-7832.7319 8610.1631 -7833.2925 8610.0234 -7833.5283 8610.1494 C-7833.3691 8610.0088 -7833.7007 8609.6953 -7833.4063 8609.665 C-7833.6289 8609.4395 L-7833.5957 8609.2881 -7833.3999 8609.4912 -7833.4707 8609.2998 C-7833.6182 8609.3154 -7834.0479 8609.4609 -7834.1797 8609.4014 C-7834.4531 8609.6289 -7834.7041 8610.0537 -7835.1465 8610.1006 C-7834.9385 8609.9561 -7835.2646 8609.6914 -7835.1235 8609.6279 C-7835.7407 8610.3369 L-7835.8877 8610.3555 -7835.7725 8610.0449 -7835.9854 8610.1426 C-7835.9746 8610.2402 -7836.0674 8610.3018 -7836.1318 8610.3818 C-7836.1875 8610.3369 -7836.7441 8610.4736 -7836.8081 8610.1074 C-7836.8735 8609.9658 -7836.5684 8610.0322 -7836.7314 8609.9014 C-7837.0029 8609.9033 -7837.0151 8610.0303 -7837.2871 8610.0361 C-7837.2925 8609.9873 L-7837.4717 8609.9326 -7837.8213 8610.1426 -7837.6265 8610.3447 C-7837.5015 8610.3555 -7837.6738 8610.125 -7837.4888 8610.2314 C-7837.6152 8610.4434 -7837.9312 8610.5029 -7838.2031 8610.5059 C-7838.1104 8610.4482 -7838.1216 8610.3506 -7838.0845 8610.2471 C-7838.4497 8610.5342 -7838.8369 8610.625 -7839.2451 8610.7441 C-7839.2515 8610.9189 -7839.0928 8610.4287 -7839.0327 8610.5205 C-7839.5557 8610.2793 -7840.1128 8610.8623 -7840.5479 8610.5098 C-7840.4766 8610.4785 -7840.5098 8610.7568 -7840.5146 8610.708 C-7840.7666 8610.6865 -7840.7549 8610.4346 -7840.9189 8610.5273 C-7840.9355 8610.3799 -7841.1255 8610.5752 -7841.2944 8610.6201 C-7841.3818 8610.7266 -7841.3384 8610.5479 -7841.1914 8610.5322 C-7841.4268 8610.6563 -7842.3691 8610.8838 -7842.9131 8610.6689 C-7842.9023 8610.7666 -7843.2471 8611.0273 -7843.3721 8611.0166 C-7843.3232 8610.7881 L-7843.4375 8610.6514 -7843.7422 8610.8076 -7843.7632 8610.6113 C-7844.0303 8610.8896 -7842.7344 8610.376 -7843.0957 8610.5898 C-7843.1895 8610.3994 -7843.5991 8610.9541 -7843.5215 8610.6426 C-7843.7725 8610.6514 -7844.0161 8610.9082 -7844.2559 8610.6943 C-7844.1865 8610.7314 -7844.0522 8610.377 -7844.2549 8610.3936 C-7844.6123 8610.4346 -7844.3564 8610.5029 -7844.6465 8610.5791 C-7844.8281 8610.6729 L-7844.8398 8610.8945 -7845.1475 8610.6426 -7845.0146 8610.8906 C-7845.0586 8610.708 -7845.5337 8611.0049 -7845.4971 8610.6357 C-7845.4473 8610.3447 L-7845.6016 8610.3662 -7845.7002 8610.6514 -7845.8213 8610.7793 C-7845.8418 8610.7529 -7845.8823 8610.6943 -7845.8745 8610.6475 C-7845.8994 8611.0928 -7846.2432 8610.6104 -7846.4268 8610.9541 C-7846.7505 8610.7998 -7847.2495 8610.9395 -7847.4023 8610.6631 C-7847.6514 8610.7979 -7847.8784 8610.957 -7848.1621 8610.8623 C-7848.1055 8610.8193 -7848.0283 8610.8076 -7848.0122 8610.7119 C-7848.1904 8610.5811 -7848.2344 8610.6982 -7848.3975 8610.7705 C-7848.3608 8610.7041 -7848.7539 8610.5098 -7848.9521 8610.3525 C-7849.1992 8610.4854 -7849.1143 8610.7256 -7849.1392 8610.8721 C-7849.3652 8610.4326 -7849.8379 8611.1553 -7850.1211 8610.7568 C-7850.0352 8610.6953 -7849.7598 8610.541 -7849.9658 8610.4307 C-7850.1919 8609.9922 -7850.4219 8610.7529 -7850.7861 8610.5439 C-7850.6968 8610.9082 L-7850.8594 8610.6826 -7851.2334 8611.1201 -7851.1963 8610.749 C-7851.3184 8610.8799 -7851.6265 8610.6279 -7851.5859 8610.9834 C-7852.1846 8610.6826 -7853.0425 8611.165 -7853.4102 8610.5273 C-7853.4961 8610.5869 -7853.7104 8610.5264 -7853.6665 8610.709 C-7853.5239 8610.9072 -7853.4673 8610.5674 -7853.4141 8610.7021 C-7853.4912 8610.7129 -7853.5078 8610.8105 -7853.5161 8610.8594 C-7853.7021 8610.7783 -7853.8486 8610.7529 -7853.6729 8610.457 C-7854.0869 8610.2373 -7854.1001 8611.0615 -7854.6274 8610.9209 C-7854.6035 8610.7754 -7854.6436 8610.7197 -7854.7979 8610.7432 C-7855.0903 8610.9951 L-7855.4312 8610.9365 -7855.2842 8610.6602 -7855.2925 8610.4111 C-7855.4746 8610.4541 -7855.6973 8610.4424 -7855.7803 8610.6279 C-7856.0015 8610.3154 L-7855.8398 8610.541 -7856.1514 8610.4658 -7856.2368 8610.5264 C-7856.1514 8610.4658 L-7856.1846 8610.3594 -7856.3955 8610.4248 -7856.5024 8610.4561 C-7856.4766 8610.6104 -7856.2617 8610.6729 -7856.1445 8610.7178 C-7856.2373 8610.8271 -7856.3823 8610.8018 -7856.5059 8610.9307 C-7856.4648 8610.6865 -7856.8027 8610.7568 -7856.9473 8610.7314 C-7857.1133 8610.6777 -7857.1348 8610.9502 -7857.1831 8610.9424 C-7857.1875 8610.8154 -7857.4541 8610.9209 -7857.3247 8610.7432 C-7857.2681 8610.7021 -7857.1953 8610.8662 -7857.1016 8610.7529 C-7857.2109 8610.6602 -7857.1982 8610.4395 -7857.4258 8610.6006 C-7857.5967 8610.7217 -7857.3818 8611.083 -7857.7061 8610.9287 C-7857.6211 8610.8682 -7857.6055 8610.7705 -7857.5391 8610.6826 C-7857.8433 8610.5557 L-7857.8564 8610.7783 L-7857.8975 8610.7217 -7857.8691 8610.7021 -7857.8877 8610.6729 C-7857.9785 8610.9072 -7858.3521 8610.7441 -7858.4209 8611.0088 C-7858.5742 8611.0322 -7858.7441 8610.8545 -7858.8906 8610.8281 C-7858.8623 8610.8096 L-7859.0415 8610.6777 -7859.2793 8610.7646 -7859.4297 8610.915 C-7859.4219 8610.8662 L-7859.5195 8610.8486 -7859.7505 8610.8838 -7859.8735 8611.0146 C-7860.1201 8610.8457 -7859.9561 8610.1738 -7860.2295 8610.4541 C-7860.48 8610.4609 -7860.6221 8610.8623 -7860.5215 8611.0049 C-7860.9717 8610.8545 -7861.4834 8611.2178 -7861.9009 8610.8721 C-7861.9658 8610.9609 -7861.9248 8611.0186 -7862.0586 8611.0713 C-7862.7197 8610.9834 -7863.4551 8611.335 -7863.9814 8610.8975 C-7863.79 8610.8037 -7863.9688 8610.6738 -7863.9727 8610.5479 C-7864.1309 8610.7471 -7864.1631 8610.3408 -7864.2197 8610.6826 C-7864.2041 8610.8838 -7864.2197 8610.9814 -7864.0337 8611.0625 C-7864.4282 8611.1709 -7865.0283 8611.1709 -7865.2471 8610.9834 C-7865.1377 8611.0762 -7865.2227 8611.1377 -7865.3086 8611.1982 C-7865.2803 8610.877 -7865.5713 8610.8281 -7865.7915 8610.9424 C-7865.8223 8611.1377 L-7865.9658 8610.9365 L-7866.0503 8610.999 -7866.0591 8611.3457 -7866.2773 8611.1592 C-7866.2891 8611.083 -7866.3018 8611.0059 -7866.3418 8610.9502 C-7866.5693 8611.1104 -7866.8906 8611.3818 -7867.1377 8611.2158 C-7867.3398 8610.9307 L-7867.4453 8610.9609 -7867.6235 8611.1338 -7867.4375 8611.2158 C-7867.8594 8611.0439 -7868.1309 8611.0225 -7868.2646 8610.7754 C-7868.9912 8611.377 -7870.0459 8611.4014 -7870.8906 8611.3584 C-7870.8652 8611.2119 L-7871.0923 8611.0752 -7870.9834 8611.4678 -7871.1416 8611.3662 C-7871.0684 8611.2266 -7871.3145 8611.0625 -7871.1362 8610.8906 C-7871.4609 8610.7373 -7871.5547 8611.1455 -7871.7656 8611.2119 C-7871.7979 8611.4033 -7871.5957 8611.0889 -7871.6367 8611.333 C-7871.6729 8611.4014 -7872.0859 8611.1826 -7872.1362 8611.4736 C-7872.2178 8611.3594 -7872.1543 8611.1455 -7872.1104 8611.0273 C-7872.3086 8611.1689 L-7872.5513 8610.8281 -7871.7559 8610.5615 -7872.0107 8610.1426 C-7872.1934 8610.1865 L-7872.3682 8609.8838 -7871.71 8609.8447 -7872.1689 8609.7402 C-7872.3682 8609.8838 -7872.5381 8610.3057 -7872.3608 8610.4346 C-7872.7754 8610.5146 -7872.5527 8611.1279 -7872.9985 8611.1025 C-7873.1201 8610.9326 -7872.6416 8611.0625 -7872.7275 8610.8232 C-7872.9375 8610.5889 -7873.1484 8610.9541 -7873.3354 8610.8721 C-7873.1279 8610.9814 -7873.3032 8611.2754 -7873.4375 8611.3281 C-7873.6641 8611.1914 -7873.29 8611.0537 -7873.6113 8611.0234 C-7873.6641 8611.1914 -7873.9595 8611.3174 -7873.7041 8611.4346 C-7873.8203 8611.8154 -7874.0381 8611.3281 -7874.2129 8611.624 C-7874.3174 8611.3555 -7873.8823 8611.0049 -7874.2354 8610.8711 C-7874.1792 8611.1289 -7874.6704 8611.2217 -7874.4839 8611.6025 C-7874.6221 8611.5303 -7874.6367 8611.3271 -7874.5361 8611.1689 C-7874.7334 8611.0098 -7875.0151 8611.6396 -7875.0801 8611.1279 C-7875.1479 8611.3916 L-7875.21 8611.3057 -7875.2983 8611.2402 -7875.3994 8611.0986 C-7875.5732 8611.0938 -7875.96 8611.4561 -7875.9443 8611.0576 C-7876 8611.0986 -7876.3975 8611.0811 -7876.2441 8611.3555 C-7875.9971 8611.5234 -7875.96 8611.1553 -7875.8223 8611.5273 C-7875.9971 8611.2236 -7876.1787 8611.5674 -7876.3213 8611.6689 C-7876.3447 8611.5146 L-7876.4297 8611.5752 -7876.6255 8611.541 -7876.6787 8611.708 C-7876.6133 8611.6201 -7876.6475 8611.5146 -7876.7148 8611.4775 C-7876.8042 8611.7119 L-7877.1494 8611.8281 -7876.8857 8611.2998 -7877.2217 8611.3682 C-7876.9663 8611.1865 L-7877.0225 8611.2256 -7877.1367 8611.0059 -7877.2979 8611.0791 C-7877.3604 8611.293 -7877.4775 8611.5498 -7877.5313 8611.7158 C-7877.7207 8611.8096 -7877.6162 8611.4746 -7877.8027 8611.6943 C-7877.5586 8611.4365 L-7877.5215 8611.3662 -7877.7231 8611.083 -7877.9761 8611.0889 C-7878.1377 8611.1631 -7878.3887 8611.4717 -7878.1338 8611.5889 C-7878.2607 8611.5928 -7878.4385 8611.4609 -7878.3379 8611.3057 C-7878.6255 8611.3799 -7878.2998 8611.5361 -7878.5479 8611.6689 C-7878.6494 8611.5264 -7878.9658 8611.3232 -7879.1563 8611.1162 C-7878.8975 8610.7578 L-7879.0693 8610.7529 L-7878.8467 8610.4678 -7879.1826 8610.5361 -7879.0566 8610.2334 C-7879.1743 8610.1865 -7879.3169 8610.2891 -7879.4307 8610.3682 C-7879.0864 8610.8525 -7879.8159 8611.0303 -7879.7158 8611.4717 C-7880.1875 8611.5928 -7880.0107 8610.3975 -7880.5024 8611.0889 C-7880.4219 8611.2041 -7880.6533 8611.54 -7880.3564 8611.4121 C-7880.6494 8611.3643 -7880.5557 8611.8555 -7880.9014 8611.6729 C-7880.6455 8611.4912 -7881.1763 8611.2256 -7880.8066 8610.9609 C-7880.8311 8611.1074 -7880.6001 8611.0723 -7880.5435 8611.0322 C-7880.6641 8610.8623 -7880.5186 8610.5869 -7880.8184 8610.5869 C-7881.0015 8610.6289 -7881.2524 8610.6377 -7881.2158 8610.8682 C-7881.2085 8611.1201 -7880.9365 8610.8408 -7881.0537 8611.0967 C-7881.4185 8611.1846 -7881.4795 8610.7998 -7881.6304 8611.249 C-7881.3999 8611.2129 -7881.3423 8611.4736 -7881.3467 8611.6475 C-7881.6143 8611.7529 L-7881.5625 8611.585 L-7881.9922 8611.4639 -7881.6895 8611.8896 -7882.1055 8611.8447 C-7882.3008 8611.5127 L-7882.2017 8611.2266 -7881.6953 8611.6396 -7881.7695 8611.1738 C-7882.04 8611.1553 -7882.1299 8611.3916 -7882.3848 8611.2705 C-7882.3281 8611.2314 -7882.2505 8611.2197 -7882.1943 8611.1777 C-7882.2915 8611.1631 -7882.3877 8610.5449 -7882.7734 8610.9072 C-7882.9727 8611.0479 -7882.8262 8611.0723 -7882.8311 8611.2471 C-7883.2656 8611.2998 -7883.3955 8611.4775 -7883.6753 8611.5049 C-7883.6177 8611.165 -7884.1699 8611.4717 -7883.8608 8611.124 C-7883.7188 8611.3232 -7883.0903 8611.3037 -7882.9365 8610.9785 C-7883.0947 8610.5762 -7882.5952 8611.0361 -7882.5024 8610.6279 C-7882.8506 8610.6182 -7882.8335 8610.2217 -7882.8896 8609.9609 C-7882.9863 8609.9434 -7883.0801 8610.0537 -7883.1377 8610.0938 C-7883.1787 8610.3369 -7883.0522 8610.335 -7883.0449 8610.5869 C-7883.4336 8610.5205 -7883.8081 8610.6563 -7884.0225 8610.8945 C-7884.1523 8610.7744 -7884.1113 8610.5303 -7883.9575 8610.5059 C-7884.4199 8610.5791 -7884.9141 8610.5449 -7885.3535 8610.4717 C-7885.0693 8610.8711 -7885.8433 8610.5654 -7885.6494 8610.8975 C-7885.4141 8610.9873 -7885.2119 8611.2705 -7885.3418 8611.4502 C-7885.4888 8611.4248 -7885.3369 8611.2754 -7885.3984 8611.1904 C-7885.5859 8611.4082 -7885.6895 8610.8408 -7885.8735 8611.1846 C-7885.4512 8611.0557 -7885.7915 8610.6982 -7885.7139 8610.3857 C-7886.0186 8610.5615 -7885.7007 8610.1631 -7886.0024 8610.1631 C-7886.3057 8610.3369 -7886.6787 8610.4736 -7887.0161 8610.541 C-7887.4399 8610.2441 -7888.0898 8610.5361 -7888.4683 8610.5479 C-7888.6665 8610.3896 -7888.5322 8610.0361 -7888.7471 8609.9746 C-7888.9995 8609.9814 -7888.5601 8610.3555 -7888.9336 8610.1943 C-7888.8975 8610.124 L-7889.0107 8610.2041 -7889.5825 8609.8838 -7889.6929 8610.3916 C-7889.5776 8610.0088 L-7889.6475 8609.9736 -7889.7119 8610.0615 -7889.7695 8610.1025 C-7889.7725 8609.9775 -7889.8535 8609.8643 -7889.7402 8609.7822 C-7889.9707 8609.5186 -7890.2241 8609.8242 -7890.4746 8609.835 C-7890.3135 8610.0615 L-7890.7422 8610.2393 -7891.0293 8610.0146 -7891.4443 8610.0938 C-7891.4316 8609.8721 L-7891.6787 8610.0049 L-7891.6182 8609.7891 -7891.8447 8609.6514 -7891.9751 8609.8311 C-7891.3335 8609.2881 L-7891.1553 8609.4189 -7891.5283 8609.5557 -7891.4165 8609.7744 C-7891.3213 8609.9658 -7890.9375 8609.9033 -7890.8755 8609.6914 C-7891.0225 8609.667 -7891.0293 8609.7158 -7891.1436 8609.7959 C-7891.1919 8609.4873 -7890.9688 8609.499 -7890.8584 8609.293 C-7890.9355 8609.3057 -7891.0449 8609.2119 -7891.0615 8609.3096 C-7890.9102 8609.1592 -7890.7578 8609.1357 -7890.5059 8609.1279 C-7890.6763 8609.249 -7890.4131 8609.3193 -7890.4775 8609.4072 C-7890.4575 8609.1357 -7890.2168 8609.0518 -7889.9053 8609.1279 C-7889.6831 8609.4424 -7889.3208 8608.9258 -7888.96 8609.0127 C-7889.1064 8609.2881 -7889.2935 8609.5088 -7889.5127 8609.6201 C-7889.2861 8609.7578 -7889.2607 8609.6113 -7889.0337 8609.751 C-7888.9238 8609.5449 -7888.8457 8609.2314 -7888.5503 8609.1064 C-7888.5342 8609.3096 L-7888.2666 8609.2041 -7888.2666 8608.9033 -7887.9258 8608.9609 C-7887.3418 8609.0615 -7886.7407 8609.0615 -7886.2949 8609.0869 C-7886.2783 8609.2891 L-7886.0303 8608.8555 -7885.4521 8609.1289 -7885.1182 8608.9365 C-7884.5503 8609.1318 -7883.8848 8608.7432 -7883.5938 8609.0928 C-7882.5913 8608.9365 -7881.7148 8608.7842 -7880.6768 8608.8584 C-7880.8516 8609.1533 L-7880.6655 8608.9365 -7880.7305 8609.3232 -7880.5479 8609.2793 C-7880.7578 8609.0439 -7880.2949 8608.9736 -7880.1665 8608.793 C-7879.7041 8609.0225 -7879.1104 8608.7705 -7878.7007 8608.5654 C-7878.6846 8608.7686 L-7878.2705 8608.3877 -7877.7759 8608.7217 -7877.2598 8608.7842 C-7877.2007 8608.8682 -7877.1074 8609.0586 -7876.9536 8609.0361 C-7876.6738 8608.708 -7876.5273 8608.7314 -7876.1167 8608.5264 C-7875.8169 8608.5264 -7875.3301 8608.6074 -7875.0254 8608.7354 C-7873.8975 8608.2744 -7872.7456 8608.5693 -7871.5732 8608.292 C-7871.4888 8608.5303 L-7870.3521 8608.0205 -7868.9541 8608.4834 -7867.9839 8608.2217 C-7868.0776 8608.6289 L-7867.7734 8608.7529 -7867.3843 8608.5225 -7867.4619 8608.2334 C-7867.1567 8608.3584 -7866.7007 8608.0361 -7866.5068 8608.3711 C-7866.1953 8608.4463 -7866.1255 8608.1826 -7865.8662 8608.1279 C-7865.2422 8608.2822 -7865.0107 8608.2471 -7864.4224 8608.1709 C-7864.5684 8608.1455 L-7864.6328 8608.2354 -7864.6387 8608.4082 -7864.4922 8608.4346 C-7864.2725 8608.3193 -7863.6846 8608.5439 -7863.9033 8608.0576 C-7863.2754 8608.3369 -7862.4385 8607.8281 -7861.8271 8608.208 C-7861.8789 8608.0752 -7861.7246 8608.0498 -7861.6602 8607.96 C-7861.1089 8607.9541 -7860.5293 8608.2256 -7860.0898 8607.999 C-7860.0024 8608.0654 -7860.2295 8608.2256 -7860.0049 8608.2393 C-7859.8721 8608.1865 -7860.0024 8608.0654 -7859.8384 8607.9912 C-7858.9453 8607.7432 -7858.0303 8608.2471 -7857.2188 8608.1826 C-7855.7754 8607.9258 -7854.2695 8608.0557 -7852.8867 8608.0127 C-7852.9023 8608.1104 L-7852.4395 8607.7373 -7851.8159 8608.4922 -7851.4463 8607.9307 C-7851.3369 8608.0234 -7851.0283 8607.9746 -7851.1094 8608.1631 C-7850.7407 8607.8994 -7850.0771 8608.4111 -7849.5439 8608.0762 C-7849.5928 8608.0674 -7849.6211 8608.0869 -7849.6777 8608.1289 C-7849.1392 8608.3447 -7848.6641 8608.0498 -7848.0957 8608.2441 C-7848.1533 8608.2871 -7848.2583 8608.3174 -7848.2754 8608.415 C-7848.0557 8608.6025 -7847.7549 8608.0029 -7847.6348 8608.4736 C-7847.5088 8608.4697 -7847.5449 8608.2373 -7847.6221 8608.251 C-7846.3779 8608.4346 -7845.0498 8608.1338 -7843.7549 8608.0264 C-7842.8271 8608.3066 -7843.6982 8608.8193 -7842.9663 8608.4678 C-7842.9063 8608.5586 -7842.9229 8608.2881 -7842.9131 8608.3857 C-7842.6299 8608.2529 -7842.4717 8608.9111 -7842.2754 8608.665 C-7842.3564 8608.376 -7842.1445 8608.5029 -7842.1387 8608.3271 C-7841.5713 8608.5146 -7841.4575 8608.7754 -7841.0098 8608.5557 C-7841.0435 8608.708 L-7840.5186 8608.2783 -7839.9102 8608.5088 -7839.4673 8608.0127 C-7836.5728 8607.9209 -7833.7983 8607.6475 -7830.9761 8607.5898 C-7828.1865 8607.6846 -7825.4551 8607.4609 -7822.6221 8607.7256 C-7821.9585 8608.125 -7821.9087 8608.1143 -7821.1797 8607.9521 C-7821.2095 8608.0166 -7821.2549 8608.0322 -7821.2061 8608.0928 C-7821.1699 8607.7646 -7820.6929 8608.0615 -7820.6235 8607.749 C-7819.5762 8607.8096 -7818.6113 8607.7197 -7817.5337 8607.7178 C-7817.7041 8607.7529 -7817.7896 8608.0205 -7817.5869 8607.999 C-7817.3755 8607.7891 L-7817.3408 8607.8818 L-7817.2021 8607.833 -7817.0513 8607.6709 -7817.1943 8607.5654 C-7814.4873 8607.2822 -7811.8242 8607.9395 -7809.1729 8607.8594 C-7808.5439 8607.9961 -7807.6475 8607.8711 -7806.9629 8607.8037 C-7804.9355 8608.2402 -7803.1084 8608.5938 -7801.0479 8608.2881 C-7801.3174 8609.1357 -7802.1675 8609.3311 Vf-7892.2578 8609.1318 m-7892.1855 8609.2959 -7891.9497 8609.3857 -7892.1377 8609.6025 C-7892.1611 8609.4502 -7892.2822 8609.2783 -7892.2578 8609.1318 Cf-7885.9619 8610.8193 m-7885.9536 8610.7705 -7885.8721 8610.8857 -7885.8521 8610.9121 C-7885.9297 8610.9248 -7886.0024 8611.0625 -7886.0645 8610.9775 C-7885.9854 8610.9658 -7885.9976 8610.8877 -7885.9619 8610.8193 Cf-7884.3521 8610.917 m-7884.3765 8611.0625 -7884.7207 8611.1777 -7884.9238 8611.1953 C-7884.3521 8610.917 Lf-7882.8521 8611.5186 m-7882.7227 8611.6416 -7882.7583 8611.709 -7882.9326 8611.7041 C-7882.9453 8611.6279 -7882.8877 8611.5889 -7882.8521 8611.5186 Cf-7882.7456 8611.1865 m-7882.6211 8611.1826 -7882.5591 8611.2686 -7882.4985 8611.3525 C-7882.5029 8611.2266 -7882.7871 8611.4307 -7882.7456 8611.1865 Cf-7879.4893 8611.6104 m-7879.4111 8611.5986 -7879.2417 8611.4775 -7879.1689 8611.6396 C-7879.2505 8611.5264 -7879.5498 8611.8242 -7879.4893 8611.6104 Cf-7877.9761 8611.3896 m-7877.9272 8611.3994 -7877.9072 8611.4258 -7877.8506 8611.3857 C-7877.7607 8611.4521 -7877.8555 8611.5586 -7877.9312 8611.5723 C-7877.9761 8611.3896 Lf-7850.4287 8610.8037 m-7850.5923 8610.876 L-7850.5684 8610.7314 L-7850.4287 8610.8037 Lf-7838.3574 8610.7959 m-7838.1943 8610.7041 -7838.2441 8610.9326 -7838.2168 8610.9541 C-7838.3643 8610.9697 -7838.1621 8610.7744 -7838.3574 8610.7959 Cf-7831.8486 8610.0674 m-7831.8984 8610.0713 L-7831.8818 8609.7705 L-7831.8486 8610.0674 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt plat/ Adobe ArtOnPath Bru) -(sh Tool/ Houtskool/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Houtskool)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt plat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registratie]) 0 Xs([Registratie])Pc0 0 0 0 1 1 1 Xa(Wit)Pc0.858823 0.85098 0.788235 1 0 0 0 Xa(Zwart)Pc0 0.945098 0.937255 0 1 0 0 Xa(RGB Rood)Pc0.094118 0 0.933333 0 1 1 0 Xa(RGB Geel)Pc0.658823 0 1 0 0 1 0 Xa(RGB Groen)Pc0.572549 0 0.133333 0 0 1 1 Xa(RGB Cyaan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blauw)Pc0.333333 0.780392 0 0 1 0 1 Xa(RGB Magenta)Pc0.172549 0.941176 0.854902 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0 0.941176 0.886274 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.760784 0.886274 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.513725 0.909804 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.376471 0.819608 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.070588 0 0.858823 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.231373 0 0.886274 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.52549 0 0.870588 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.72549 0 0.858823 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.835294 0.129412 0.890196 0.007843 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.87451 0.337255 0.901961 0.231373 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.745098 0 0.67451 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.772549 0.031373 0.431373 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.709804 0.141176 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.85098 0.513725 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.917647 0.909804 0 0 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc0.960784 1 0.329412 0.192157 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.737255 0.92549 0 0 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.52549 0.92549 0 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.388235 1 0.301961 0.082353 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.105882 0.968627 0.419608 0.003922 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.917647 0.133333 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.262745 0.301961 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.439216 0.447059 0.498039 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.537255 0.537255 0.572549 0.239216 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.607843 0.607843 0.607843 0.431373 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.258824 0.407843 0.6 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.352941 0.501961 0.686274 0.101961 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.396078 0.568627 0.796078 0.243137 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.423529 0.631373 0.909804 0.384314 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.439216 0.694118 1 0.517647 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.486274 0.764706 0.952941 0.713725 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Lineair verloop 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Lineair verloop 1)PcBb0 0 0 0 Bh2 (Radiaal verloop 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radiaal verloop 1)PcBb2 (Lineair verloop 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Lineair verloop 2)PcBb0 0 0 0 Bh2 (Radiaal verloop 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radiaal verloop 2)Pc(Patroon) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Patroon)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(Laag 3) Ln0 A1 Ap0 O0 J 0 j 1 w 4 M []0 d0 XR99.6929 671.832 m99.6929 667.3857 79.9751 663.7813 55.6533 663.7813 c31.3301 663.7813 11.6128 667.3857 11.6128 671.832 c11.6128 676.2778 31.3301 679.8823 55.6533 679.8823 c79.9751 679.8823 99.6929 676.2778 99.6929 671.832 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 55.6528 772.6953 0 44.0405 1 0 0 0.1828 0 6507.0527 Bg44.0405 0 0 -8.05061 55.6528 671.8315 Bmf0 BB261.668 671.832 m261.668 667.3857 241.9507 663.7813 217.6274 663.7813 c193.3047 663.7813 173.5864 667.3857 173.5864 671.832 c173.5864 676.2778 193.3047 679.8823 217.6274 679.8823 c241.9507 679.8823 261.668 676.2778 261.668 671.832 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 217.627 772.6953 0 44.041 1 0 0 0.1828 0 6507.0527 Bg44.041 0 0 -8.0507 217.627 671.8315 Bmf0 BB423.4443 671.832 m423.4443 667.3857 403.7246 663.7813 379.4033 663.7813 c355.0801 663.7813 335.3613 667.3857 335.3613 671.832 c335.3613 676.2778 355.0801 679.8823 379.4033 679.8823 c403.7246 679.8823 423.4443 676.2778 423.4443 671.832 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 379.4023 772.6953 0 44.0415 1 0 0 0.1828 0 6507.0527 Bg44.0415 0 0 -8.05079 379.4023 671.8315 Bmf0 BB593.9697 671.832 m593.9697 667.3857 574.252 663.7813 549.9297 663.7813 c525.6074 663.7813 505.8887 667.3857 505.8887 671.832 c505.8887 676.2778 525.6074 679.8823 549.9297 679.8823 c574.252 679.8823 593.9697 676.2778 593.9697 671.832 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 549.9297 772.6953 0 44.0405 1 0 0 0.1828 0 6507.0527 Bg44.0405 0 0 -8.05061 549.9297 671.8315 Bmf0 BB99.6929 464.5 m99.6929 460.0547 79.9751 456.4502 55.6533 456.4502 c31.3301 456.4502 11.6128 460.0547 11.6128 464.5 c11.6128 468.9468 31.3301 472.5513 55.6533 472.5513 c79.9751 472.5513 99.6929 468.9468 99.6929 464.5 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 55.6528 -361.5 0 44.0405 1 0 0 0.1828 0 6507.0527 Bg44.0405 0 0 -8.05061 55.6528 464.5005 Bmf0 BB261.668 464.5 m261.668 460.0547 241.9507 456.4502 217.6274 456.4502 c193.3047 456.4502 173.5864 460.0547 173.5864 464.5 c173.5864 468.9468 193.3047 472.5513 217.6274 472.5513 c241.9507 472.5513 261.668 468.9468 261.668 464.5 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 217.627 -361.5 0 44.041 1 0 0 0.1828 0 6507.0527 Bg44.041 0 0 -8.0507 217.627 464.5005 Bmf0 BB423.4443 464.5 m423.4443 460.0547 403.7246 456.4502 379.4033 456.4502 c355.0801 456.4502 335.3613 460.0547 335.3613 464.5 c335.3613 468.9468 355.0801 472.5513 379.4033 472.5513 c403.7246 472.5513 423.4443 468.9468 423.4443 464.5 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 379.4023 -361.5 0 44.0415 1 0 0 0.1828 0 6507.0527 Bg44.0415 0 0 -8.05079 379.4023 464.5005 Bmf0 BB593.9697 464.5 m593.9697 460.0547 574.252 456.4502 549.9297 456.4502 c525.6074 456.4502 505.8887 460.0547 505.8887 464.5 c505.8887 468.9468 525.6074 472.5513 549.9297 472.5513 c574.252 472.5513 593.9697 468.9468 593.9697 464.5 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 549.9297 -361.5 0 44.0405 1 0 0 0.1828 0 6507.0527 Bg44.0405 0 0 -8.05061 549.9297 464.5005 Bmf0 BB99.6929 256.8936 m99.6929 252.4492 79.9751 248.8428 55.6533 248.8428 c31.3301 248.8428 11.6128 252.4492 11.6128 256.8936 c11.6128 261.3389 31.3301 264.9434 55.6533 264.9434 c79.9751 264.9434 99.6929 261.3389 99.6929 256.8936 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 55.6528 -1497.209 0 44.0396 1 0 0 0.1828 0 6507.0527 Bg44.0396 0 0 -8.05043 55.6528 256.8926 Bmf0 BB261.668 256.8936 m261.668 252.4492 241.9507 248.8428 217.6274 248.8428 c193.3047 248.8428 173.5864 252.4492 173.5864 256.8936 c173.5864 261.3389 193.3047 264.9434 217.6274 264.9434 c241.9507 264.9434 261.668 261.3389 261.668 256.8936 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 217.627 -1497.209 0 44.04 1 0 0 0.1828 0 6507.0527 Bg44.04 0 0 -8.05052 217.627 256.8926 Bmf0 BB423.4443 256.8936 m423.4443 252.4492 403.7246 248.8428 379.4033 248.8428 c355.0801 248.8428 335.3613 252.4492 335.3613 256.8936 c335.3613 261.3389 355.0801 264.9434 379.4033 264.9434 c403.7246 264.9434 423.4443 261.3389 423.4443 256.8936 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 379.4023 -1497.209 0 44.0405 1 0 0 0.1828 0 6507.0527 Bg44.0405 0 0 -8.05061 379.4023 256.8926 Bmf0 BB593.9697 256.8936 m593.9697 252.4492 574.252 248.8428 549.9297 248.8428 c525.6074 248.8428 505.8887 252.4492 505.8887 256.8936 c505.8887 261.3389 525.6074 264.9434 549.9297 264.9434 c574.252 264.9434 593.9697 261.3389 593.9697 256.8936 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 549.9297 -1497.209 0 44.0396 1 0 0 0.1828 0 6507.0527 Bg44.0396 0 0 -8.05043 549.9297 256.8926 Bmf0 BB99.6929 49.292 m99.6929 44.8467 79.9751 41.2412 55.6533 41.2412 c31.3301 41.2412 11.6128 44.8467 11.6128 49.292 c11.6128 53.7363 31.3301 57.3408 55.6533 57.3408 c79.9751 57.3408 99.6929 53.7363 99.6929 49.292 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 55.6528 -2632.8887 0 44.0376 1 0 0 0.1828 0 6507.0527 Bg44.0376 0 0 -8.05007 55.6528 49.291 Bmf0 BB261.668 49.292 m261.668 44.8467 241.9507 41.2412 217.6274 41.2412 c193.3047 41.2412 173.5864 44.8467 173.5864 49.292 c173.5864 53.7363 193.3047 57.3408 217.6274 57.3408 c241.9507 57.3408 261.668 53.7363 261.668 49.292 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 217.627 -2632.8887 0 44.0381 1 0 0 0.1828 0 6507.0527 Bg44.0381 0 0 -8.05016 217.627 49.291 Bmf0 BB423.4443 49.292 m423.4443 44.8467 403.7246 41.2412 379.4033 41.2412 c355.0801 41.2412 335.3613 44.8467 335.3613 49.292 c335.3613 53.7363 355.0801 57.3408 379.4033 57.3408 c403.7246 57.3408 423.4443 53.7363 423.4443 49.292 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 379.4023 -2632.8887 0 44.0386 1 0 0 0.1828 0 6507.0527 Bg44.0386 0 0 -8.05025 379.4023 49.291 Bmf0 BB593.9697 49.292 m593.9697 44.8467 574.252 41.2412 549.9297 41.2412 c525.6074 41.2412 505.8887 44.8467 505.8887 49.292 c505.8887 53.7363 525.6074 57.3408 549.9297 57.3408 c574.252 57.3408 593.9697 53.7363 593.9697 49.292 cBb0 0 0 0 Bh1 (Unnamed gradient 24) 549.9297 -2632.8887 0 44.0376 1 0 0 0.1828 0 6507.0527 Bg44.0376 0 0 -8.05007 549.9297 49.291 Bmf0 BBLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 6 79 255 255 0 50 Lb(Laag 2) Ln0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR225.0322 761.2285 m225.0322 762.4849 224.3433 763.7822 222.7959 764.9189 c221.2666 766.0352 218.959 766.8179 216.3623 766.812 c213.7676 766.8179 211.46 766.0352 209.9307 764.9189 c208.3833 763.7822 207.6919 762.4849 207.6943 761.2285 c207.6943 760.7534 207.5547 760.314 207.3247 759.9355 C225.4019 759.9355 L225.1719 760.314 225.0322 760.7534 225.0322 761.2285 cn*u1 D0 O0 0 0 0 1 1 1 Xa245.0273 754.9355 m187.6982 754.9355 L185.9507 754.9316 184.5337 753.5161 184.5313 751.7646 C184.5313 709.77 L184.5337 708.0205 185.9507 706.6055 187.6982 706.6016 C245.0273 706.6016 L246.7769 706.6055 248.1938 708.0225 248.1958 709.77 C248.1958 751.7646 L248.1982 751.7646 L248.1938 753.5142 246.7769 754.9316 245.0273 754.9355 Cf0 D216.3633 714.7759 m207.5313 714.7759 200.3721 721.9355 200.3721 730.7676 c200.3721 739.5996 207.5313 746.7593 216.3633 746.7593 c225.1953 746.7593 232.3555 739.5996 232.3555 730.7676 c232.3555 721.9355 225.1953 714.7759 216.3633 714.7759 cf*U*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa253.1958 751.7646 m253.1958 756.2793 249.5396 759.9336 245.0273 759.9355 C229.6626 759.9355 L229.8926 760.314 230.0322 760.7534 230.0322 761.2285 c230.0322 764.437 228.2207 767.1821 225.728 768.9692 c223.2148 770.7808 219.937 771.8076 216.3623 771.812 c212.7896 771.8076 209.5117 770.7808 206.9985 768.9692 c204.5059 767.1821 202.6943 764.437 202.6943 761.2285 c202.6943 760.7534 202.834 760.314 203.064 759.9355 C187.6982 759.9355 L183.1855 759.9336 179.5313 756.2773 179.5313 751.7646 C179.5313 709.77 L179.5313 705.2598 183.1855 701.6035 187.6982 701.6016 C245.0273 701.6016 L249.5396 701.6035 253.1958 705.2578 253.1958 709.77 C253.1982 751.7646 L253.1958 751.7646 Lf0 D207.6943 761.2285 m207.6919 762.4849 208.3833 763.7822 209.9307 764.9189 c211.46 766.0352 213.7676 766.8179 216.3623 766.812 c218.959 766.8179 221.2666 766.0352 222.7959 764.9189 c224.3433 763.7822 225.0322 762.4849 225.0322 761.2285 c225.0322 760.7534 225.1719 760.314 225.4019 759.9355 C207.3247 759.9355 L207.5547 760.314 207.6943 760.7534 207.6943 761.2285 cf248.1958 751.7646 m248.1958 709.77 L248.1938 708.0225 246.7769 706.6055 245.0273 706.6016 C187.6982 706.6016 L185.9507 706.6055 184.5337 708.0205 184.5313 709.77 C184.5313 751.7646 L184.5337 753.5161 185.9507 754.9316 187.6982 754.9355 C245.0273 754.9355 L246.7769 754.9316 248.1938 753.5142 248.1982 751.7646 C248.1958 751.7646 Lf*U*u1 D216.3633 746.7593 m207.5313 746.7593 200.3721 739.5996 200.3721 730.7676 c200.3721 721.9355 207.5313 714.7759 216.3633 714.7759 c225.1953 714.7759 232.3555 721.9355 232.3555 730.7676 c232.3555 739.5996 225.1953 746.7593 216.3633 746.7593 cf0 D227.6309 726.2246 m220.9072 726.2246 L220.9072 719.5005 L211.8203 719.5005 L211.8203 726.2246 L205.0967 726.2246 L205.0967 735.311 L211.8203 735.311 L211.8203 742.0342 L220.9072 742.0342 L220.9072 735.311 L227.6309 735.311 L227.6309 726.2246 Lf*U0 0 0 0 1 1 1 Xa220.9072 742.0342 m211.8203 742.0342 L211.8203 735.311 L205.0967 735.311 L205.0967 726.2246 L211.8203 726.2246 L211.8203 719.5005 L220.9072 719.5005 L220.9072 726.2246 L227.6309 726.2246 L227.6309 735.311 L220.9072 735.311 L220.9072 742.0342 LfU0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa92.3125 724.6372 m90.4316 735.1997 80.3438 742.2378 69.7813 740.3569 c67.8794 740.0186 66.0972 739.4053 64.4556 738.5796 C64.1597 736.583 63.4375 734.6133 62.2598 732.8218 C60.2295 734.1572 L62.2559 732.8159 L61.3599 731.4614 L88.0835 713.8809 L89.2363 713.1211 89.5552 711.5713 88.7974 710.4185 c88.3164 709.6875 87.519 709.2915 86.7061 709.2915 c86.2344 709.2915 85.7578 709.4243 85.335 709.7026 C58.6016 727.2915 L53.8071 720.0435 L53.853 719.3081 53.9302 718.5693 54.0625 717.8267 c55.9434 707.2642 66.0293 700.2261 76.5918 702.1069 c87.1543 703.9878 94.1934 714.0747 92.3125 724.6372 cf0 0 0 0 1 1 1 Xa85.335 709.7026 m85.7578 709.4243 86.2344 709.2915 86.7061 709.2915 c87.519 709.2915 88.3164 709.6875 88.7974 710.4185 c89.5552 711.5713 89.2363 713.1211 88.0835 713.8809 C61.3599 731.4614 L58.6016 727.2915 L85.335 709.7026 Lf59.7495 740.6724 m59.7476 743.7563 58.2544 746.7642 55.4888 748.5811 c53.8818 749.6362 52.0928 750.1357 50.3101 750.1357 c47.2266 750.1318 44.2183 748.6411 42.3979 745.8687 C33.6421 732.6318 L49.4375 722.251 L58.1968 735.4922 L59.252 737.0991 59.7495 738.8896 59.7495 740.6724 cfu55.4888 748.5811 m53.8818 749.6362 52.0928 750.1357 50.3101 750.1357 c47.2266 750.1318 44.2183 748.6411 42.3979 745.8687 C33.6421 732.6318 L33.7598 732.5547 L42.5605 745.9312 L46.7305 743.1729 L37.9385 729.8081 L49.4375 722.251 L58.1968 735.4922 L59.252 737.0991 59.7495 738.8896 59.7495 740.6724 c59.7476 743.7563 58.2544 746.7642 55.4888 748.5811 cn*u1 D0 O0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa58.1587 752.644 m55.7446 754.2329 53.0044 754.9985 50.3101 754.9985 c45.6597 755.0005 41.0845 752.7241 38.3384 748.543 C21.2744 722.749 L19.6816 720.3286 18.916 717.5884 18.916 714.8926 c18.9141 710.2437 21.1904 705.6689 25.3696 702.9209 c27.7861 701.332 30.5239 700.5664 33.2202 700.5684 c33.2241 700.5684 33.2285 700.5684 33.2324 700.5684 c37.877 700.5684 42.4438 702.8462 45.1919 707.02 C53.8071 720.0435 L58.6016 727.2915 L61.3599 731.4614 L62.2559 732.8159 L60.2295 734.1572 L62.2598 732.8218 L63.4375 734.6133 64.1597 736.583 64.4556 738.5796 c64.5586 739.2759 64.6123 739.9756 64.6123 740.6724 c64.6162 745.3232 62.3379 749.8979 58.1587 752.644 cf0 D58.1968 735.4922 m49.4375 722.251 L37.9385 729.8081 L29.1499 716.4492 L28.3901 715.2964 26.8403 714.9775 25.6875 715.7354 c24.9565 716.2163 24.5605 717.0137 24.5605 717.8267 c24.5605 718.2983 24.6934 718.7749 24.9717 719.1978 C33.7598 732.5547 L33.6421 732.6318 L42.3979 745.8687 L44.2183 748.6411 47.2266 750.1318 50.3101 750.1357 c52.0928 750.1357 53.8818 749.6362 55.4888 748.5811 c58.2544 746.7642 59.7476 743.7563 59.7495 740.6724 c59.7495 738.8896 59.252 737.0991 58.1968 735.4922 Cf*U0 0 0 0 1 1 1 Xa42.5605 745.9312 m33.7598 732.5547 L24.9717 719.1978 L24.6934 718.7749 24.5605 718.2983 24.5605 717.8267 c24.5605 717.0137 24.9565 716.2163 25.6875 715.7354 c26.8403 714.9775 28.3901 715.2964 29.1499 716.4492 C37.9385 729.8081 L46.7305 743.1729 L42.5605 745.9312 LfUu403.4346 775.4336 m407.2139 773.356 L411.8564 781.8027 L408.0762 783.8789 L403.4346 775.4336 Lf399.0654 772.1294 m398.7881 772.2808 398.5127 772.3472 398.2285 772.3472 c397.6045 772.3428 397.0078 772.0215 396.6885 771.437 C395.042 768.4409 L400.4463 765.4697 L400.9287 765.2051 401.1064 764.5967 400.8398 764.1123 c400.6582 763.7808 400.3154 763.5938 399.9629 763.5938 c399.7998 763.5938 399.6348 763.6338 399.4824 763.7173 C394.0781 766.688 L392.0117 762.9287 L397.5059 759.9092 L397.9893 759.6445 398.166 759.0361 397.9004 758.5522 c397.7197 758.2212 397.377 758.0332 397.0234 758.0332 c396.8604 758.0332 396.6953 758.0732 396.542 758.1572 C391.0488 761.1758 L389.0928 757.6172 L394.4961 754.646 L394.9795 754.3794 395.1572 753.7715 394.8906 753.2876 c394.709 752.957 394.3672 752.77 394.0146 752.77 c393.8516 752.77 393.6855 752.8101 393.5322 752.8945 C388.1299 755.8652 L385.8242 751.6689 L396.7783 745.6484 L407.6387 765.4092 L407.792 765.6909 407.8584 765.9746 407.8584 766.2563 c407.8545 766.8823 407.5332 767.4771 406.9512 767.7964 C399.0654 772.1294 Lf*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa422.5088 783.5425 m403.667 793.8989 L402.457 794.563 400.9365 794.123 400.2705 792.9136 c399.6064 791.7036 400.0479 790.1826 401.2578 789.5186 C404.4912 787.7412 L398.7607 777.314 L398.583 777.3281 398.4053 777.3472 398.2285 777.3472 c395.8496 777.3516 393.5352 776.0791 392.3057 773.8472 C373.2822 739.2339 L372.7148 738.2124 372.4434 737.0811 372.4453 735.9868 c372.4443 735.2251 372.5869 734.4746 372.8369 733.7598 C371.0098 716.7842 L370.9326 716.0771 371.166 715.3838 371.6133 714.8623 C357.9834 688.7954 L357.7275 688.3062 357.917 687.7017 358.4063 687.4463 c358.5537 687.3687 358.7119 687.332 358.8682 687.332 c359.2285 687.332 359.5771 687.5278 359.7559 687.8691 C373.4209 713.9995 L373.4453 713.999 373.4697 713.9902 373.4941 713.9902 c374.0459 713.9902 374.5957 714.1729 375.0459 714.5313 C388.1816 724.9966 L390.1494 725.3228 391.9619 726.5112 393 728.396 C412.0254 763.0073 L412.585 764.0371 412.8584 765.1563 412.8584 766.2563 c412.8604 767.7905 412.3262 769.2935 411.3506 770.501 C417.0371 780.8452 L420.0996 779.1616 L420.4814 778.9521 420.8945 778.8525 421.3018 778.8525 c422.1846 778.8525 423.0391 779.3198 423.4951 780.1475 c424.1592 781.3574 423.7188 782.8784 422.5088 783.5425 Cf0 D406.9512 767.7964 m407.5332 767.4771 407.8545 766.8823 407.8584 766.2563 c407.8584 765.9746 407.792 765.6909 407.6387 765.4092 C396.7783 745.6484 L385.8242 751.6689 L388.1299 755.8652 L393.5322 752.8945 L393.6855 752.8101 393.8516 752.77 394.0146 752.77 c394.3672 752.77 394.709 752.957 394.8906 753.2876 c395.1572 753.7715 394.9795 754.3794 394.4961 754.646 C389.0928 757.6172 L391.0488 761.1758 L396.542 758.1572 L396.6953 758.0732 396.8604 758.0332 397.0234 758.0332 c397.377 758.0332 397.7197 758.2212 397.9004 758.5522 c398.166 759.0361 397.9893 759.6445 397.5059 759.9092 C392.0117 762.9287 L394.0781 766.688 L399.4824 763.7173 L399.6348 763.6338 399.7998 763.5938 399.9629 763.5938 c400.3154 763.5938 400.6582 763.7808 400.8398 764.1123 c401.1064 764.5967 400.9287 765.2051 400.4463 765.4697 C395.042 768.4409 L396.6885 771.437 L397.0078 772.0215 397.6045 772.3428 398.2285 772.3472 c398.5127 772.3472 398.7881 772.2808 399.0654 772.1294 C406.9512 767.7964 Lf377.5879 731.1538 m383.6309 727.8018 L376.626 722.2212 L377.5879 731.1538 Lf407.2139 773.356 m403.4346 775.4336 L408.0762 783.8789 L411.8564 781.8027 L407.2139 773.356 Lf*U0 0 0 0 1 1 1 Xa383.6309 727.8018 m377.5879 731.1538 L376.626 722.2212 L383.6309 727.8018 LfUu0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa568.3203 725.7046 m568.0479 725.9604 567.8906 726.1846 567.7383 726.4063 c567.4473 726.8486 567.2168 727.3071 566.9727 727.8125 c566.6924 728.4028 566.4072 729.0498 566.1309 729.6582 C566.0146 729.3467 565.8945 729.019 565.7744 728.6816 c564.9814 726.4741 564.1729 723.9302 563.4795 722.3652 c563.2578 721.8979 563.1074 721.5366 562.708 721.0479 C562.4756 720.832 562.1543 720.2993 560.999 720.2231 C560.0967 720.2549 559.6855 720.6714 559.4639 720.8745 C559.2354 721.1069 559.123 721.2847 559.0195 721.4541 c558.8232 721.7861 558.6904 722.0947 558.542 722.4521 c558.2568 723.1606 557.96 724.0425 557.6367 725.0444 c557.0225 726.9517 556.3164 729.2778 555.6387 731.1533 C555.3184 729.8003 554.9766 728.1621 554.6279 726.4253 c553.6553 721.5977 552.6543 716.0659 551.6309 712.8682 c551.3115 711.9297 551.0684 711.2104 550.5215 710.4619 C550.2295 710.1064 549.707 709.4575 548.5332 709.4067 C547.3408 709.4595 546.8311 710.147 546.5771 710.4829 C546.3047 710.8765 546.1602 711.2212 546.0127 711.6016 c545.7334 712.3501 545.5117 713.2383 545.2813 714.3086 c544.8262 716.438 544.3848 719.2505 543.9229 722.2852 c543.0918 727.8242 542.1855 734.1694 541.2559 737.7969 C540.8623 736.4976 540.4619 734.8276 540.0771 733.0425 c539.0908 728.521 538.207 723.3125 537.2139 720.2529 c536.9023 719.354 536.6641 718.6499 536.0713 717.8994 c535.7627 717.5293 535.166 716.9414 534.1133 716.918 C532.4512 717.0342 531.8545 717.9688 531.29 718.6582 C530.7422 719.4175 530.2861 720.2993 529.835 721.2681 c528.9434 723.1963 528.1123 725.4717 527.416 727.1826 c527.2705 727.5552 527.1191 727.9092 526.9814 728.2173 C526.5586 727.8813 526.125 727.478 525.8428 727.2017 c525.625 726.9858 525.5068 726.8613 525.5049 726.8589 C525.1279 726.4595 524.5977 726.231 524.0498 726.231 C518.7959 726.231 L521.3262 721.6343 529.6553 708.7349 549.1855 699.7979 C567.0898 708.0879 575.7539 719.7637 578.9375 725.0952 C574.2559 725.0708 570.2822 725.0508 569.9189 725.0508 c569.0283 725.0786 568.5869 725.4761 568.3203 725.7046 Cf525.5449 732.0947 m526.0967 732.4038 526.6533 732.7505 527.6533 732.7842 C528.8984 732.6953 529.2471 732.1011 529.5283 731.8286 C529.7969 731.4985 529.9707 731.1938 530.1504 730.8579 c530.502 730.1919 530.834 729.4028 531.1934 728.5127 c531.9033 726.7471 532.6982 724.6025 533.4639 722.9531 c533.541 722.7813 533.6201 722.6143 533.6992 722.4541 C534.0801 723.8403 534.4873 725.7178 534.9023 727.7432 c535.8457 732.3022 536.7861 737.5234 538.0146 740.668 c538.3955 741.5835 538.7314 742.353 539.4785 743.0889 c539.8721 743.4678 540.5352 743.8882 541.3965 743.8882 c542.2891 743.8843 542.9297 743.4189 543.2803 743.0508 c543.6504 742.6641 543.8701 742.2832 544.0752 741.8838 c544.4668 741.0864 544.7607 740.1689 545.0547 739.0752 c545.6299 736.9038 546.1436 734.0698 546.6387 731.0122 c547.3799 726.4102 548.0781 721.2788 548.7314 717.5508 C548.9883 718.6758 549.251 719.9214 549.5127 721.2129 c550.542 726.2456 551.5322 731.8857 552.5029 734.8462 C552.8643 735.7383 552.9004 736.3306 553.8809 737.2397 C554.1621 737.4683 554.6533 737.7388 555.292 737.7388 C556.3467 737.7051 556.8887 737.1787 557.2305 736.834 C557.584 736.4556 557.8184 736.0791 558.0488 735.6665 c558.5 734.8501 558.8955 733.8799 559.2969 732.7969 c559.9248 731.0898 560.54 729.1147 561.0879 727.3892 C561.833 729.5308 562.6162 731.8926 563.3828 733.4292 c563.6406 733.9116 563.8369 734.3174 564.3359 734.8125 C564.6064 735.0532 565.0615 735.4614 565.9561 735.4868 C567.3984 735.375 567.7939 734.6494 568.1768 734.2476 C568.5361 733.7759 568.8066 733.2896 569.0791 732.7632 c569.6123 731.7246 570.1094 730.5342 570.5361 729.6377 c570.6338 729.4238 570.7344 729.2222 570.8242 729.0532 C572.5898 729.0615 576.6367 729.082 580.9268 729.1045 C583.2734 735.0684 588.1104 752.0161 573.0244 757.7148 c557.915 763.4224 549.1855 747.8101 Y540.457 763.4224 525.3477 757.7148 v511.1289 752.3438 514.5352 736.9731 516.9863 730.23 C523.2197 730.23 L523.7666 730.7583 524.6152 731.5161 525.5449 732.0947 Cf0 0 0 0 1 1 1 Xa595.0498 729.1787 m595.0342 729.1787 587.6797 729.1396 580.9268 729.1045 c576.6367 729.082 572.5898 729.0615 570.8242 729.0532 C570.7344 729.2222 570.6338 729.4238 570.5361 729.6377 c570.1094 730.5342 569.6123 731.7246 569.0791 732.7632 c568.8066 733.2896 568.5361 733.7759 568.1768 734.2476 C567.7939 734.6494 567.3984 735.375 565.9561 735.4868 C565.0615 735.4614 564.6064 735.0532 564.3359 734.8125 C563.8369 734.3174 563.6406 733.9116 563.3828 733.4292 c562.6162 731.8926 561.833 729.5308 561.0879 727.3892 C560.54 729.1147 559.9248 731.0898 559.2969 732.7969 c558.8955 733.8799 558.5 734.8501 558.0488 735.6665 c557.8184 736.0791 557.584 736.4556 557.2305 736.834 C556.8887 737.1787 556.3467 737.7051 555.292 737.7388 C554.6533 737.7388 554.1621 737.4683 553.8809 737.2397 C552.9004 736.3306 552.8643 735.7383 552.5029 734.8462 C551.5322 731.8857 550.542 726.2456 549.5127 721.2129 c549.251 719.9214 548.9883 718.6758 548.7314 717.5508 C548.0781 721.2788 547.3799 726.4102 546.6387 731.0122 c546.1436 734.0698 545.6299 736.9038 545.0547 739.0752 c544.7607 740.1689 544.4668 741.0864 544.0752 741.8838 c543.8701 742.2832 543.6504 742.6641 543.2803 743.0508 c542.9297 743.4189 542.2891 743.8843 541.3965 743.8882 c540.5352 743.8882 539.8721 743.4678 539.4785 743.0889 c538.7314 742.353 538.3955 741.5835 538.0146 740.668 c536.7861 737.5234 535.8457 732.3022 534.9023 727.7432 c534.4873 725.7178 534.0801 723.8403 533.6992 722.4541 C533.6201 722.6143 533.541 722.7813 533.4639 722.9531 c532.6982 724.6025 531.9033 726.7471 531.1934 728.5127 c530.834 729.4028 530.502 730.1919 530.1504 730.8579 c529.9707 731.1938 529.7969 731.4985 529.5283 731.8286 C529.2471 732.1011 528.8984 732.6953 527.6533 732.7842 C526.6533 732.7505 526.0967 732.4038 525.5449 732.0947 C524.6152 731.5161 523.7666 730.7583 523.2197 730.23 C516.9863 730.23 L506.2441 730.23 L505.1387 730.23 504.2441 729.3354 504.2441 728.2295 c504.2441 727.1255 505.1387 726.229 506.2441 726.229 C506.2441 726.231 L518.7959 726.231 L524.0498 726.231 L524.5977 726.231 525.1279 726.4595 525.5049 726.8589 C525.5068 726.8613 525.625 726.9858 525.8428 727.2017 c526.125 727.478 526.5586 727.8813 526.9814 728.2173 C527.1191 727.9092 527.2705 727.5552 527.416 727.1826 c528.1123 725.4717 528.9434 723.1963 529.835 721.2681 c530.2861 720.2993 530.7422 719.4175 531.29 718.6582 C531.8545 717.9688 532.4512 717.0342 534.1133 716.918 C535.166 716.9414 535.7627 717.5293 536.0713 717.8994 c536.6641 718.6499 536.9023 719.354 537.2139 720.2529 c538.207 723.3125 539.0908 728.521 540.0771 733.0425 c540.4619 734.8276 540.8623 736.4976 541.2559 737.7969 C542.1855 734.1694 543.0918 727.8242 543.9229 722.2852 c544.3848 719.2505 544.8262 716.438 545.2813 714.3086 c545.5117 713.2383 545.7334 712.3501 546.0127 711.6016 c546.1602 711.2212 546.3047 710.8765 546.5771 710.4829 C546.8311 710.147 547.3408 709.4595 548.5332 709.4067 C549.707 709.4575 550.2295 710.1064 550.5215 710.4619 C551.0684 711.2104 551.3115 711.9297 551.6309 712.8682 c552.6543 716.0659 553.6553 721.5977 554.6279 726.4253 c554.9766 728.1621 555.3184 729.8003 555.6387 731.1533 C556.3164 729.2778 557.0225 726.9517 557.6367 725.0444 c557.96 724.0425 558.2568 723.1606 558.542 722.4521 c558.6904 722.0947 558.8232 721.7861 559.0195 721.4541 c559.123 721.2847 559.2354 721.1069 559.4639 720.8745 C559.6855 720.6714 560.0967 720.2549 560.999 720.2231 C562.1543 720.2993 562.4756 720.832 562.708 721.0479 C563.1074 721.5366 563.2578 721.8979 563.4795 722.3652 c564.1729 723.9302 564.9814 726.4741 565.7744 728.6816 c565.8945 729.019 566.0146 729.3467 566.1309 729.6582 C566.4072 729.0498 566.6924 728.4028 566.9727 727.8125 c567.2168 727.3071 567.4473 726.8486 567.7383 726.4063 c567.8906 726.1846 568.0479 725.9604 568.3203 725.7046 C568.5869 725.4761 569.0283 725.0786 569.9189 725.0508 c570.2822 725.0508 574.2559 725.0708 578.9375 725.0952 c586.1572 725.1328 595.0664 725.1802 595.0684 725.1802 c596.1729 725.1841 597.0645 726.085 597.0586 727.189 c597.0518 728.293 596.1533 729.1831 595.0498 729.1787 cfUu*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa209.2461 531.9917 m203.1836 531.8403 201.1367 531.6128 v199.0908 531.3853 198.1074 530.062 Y179.2188 493.6362 L193.9473 493.5562 202.4668 506.7866 v205.4639 511.4395 203 514.6963 204.792 521.4048 c205.8799 525.4624 208.4219 528.4351 210.1201 530.2866 c211.8223 532.1436 209.2461 531.9922 Yf0 D202.1997 523.9746 m191.7896 504.0664 L191.522 503.5537 191 503.2607 190.459 503.2607 c190.2251 503.2607 189.9873 503.3154 189.7651 503.4316 c189.0322 503.8149 188.7466 504.7212 189.1304 505.4561 C199.5405 525.3662 L199.9243 526.0991 200.8306 526.3828 201.5649 525.999 c202.2998 525.6152 202.5835 524.709 202.1997 523.9746 Cf*U*u1 D250.6992 607.3848 m240.0762 612.9917 234.043 598.1572 Y200.8281 535.8223 L200 534.0381 202.123 534.1138 v204.2441 534.1895 209.3223 534.417 212.2012 534.6445 c215.082 534.8721 216.1309 536.6226 Y251.4453 590.2202 L261.0547 601.9194 250.6992 607.3848 vf0 D239.3188 590.9771 m210.7031 540.1538 L210.4272 539.6641 209.9185 539.3887 209.3945 539.3887 c209.145 539.3887 208.8926 539.4507 208.6597 539.582 c207.939 539.9893 207.6826 540.9028 208.0898 541.6255 C236.7051 592.4487 L237.1104 593.1714 238.0239 593.4277 238.7466 593.0205 c239.4692 592.6133 239.7261 591.6997 239.3188 590.9771 Cf*U0 0 0 0 1 1 1 Xa201.5649 525.999 m200.8306 526.3828 199.9243 526.0991 199.5405 525.3662 C189.1304 505.4561 L188.7466 504.7212 189.0322 503.8149 189.7651 503.4316 c189.9873 503.3154 190.2251 503.2607 190.459 503.2607 c191 503.2607 191.522 503.5537 191.7896 504.0664 C202.1997 523.9746 L202.5835 524.709 202.2998 525.6152 201.5649 525.999 cf238.7466 593.0205 m238.0239 593.4277 237.1104 593.1714 236.7051 592.4487 C208.0898 541.6255 L207.6826 540.9028 207.939 539.9893 208.6597 539.582 c208.8926 539.4507 209.145 539.3887 209.3945 539.3887 c209.9185 539.3887 210.4272 539.6641 210.7031 540.1538 C239.3188 590.9771 L239.7261 591.6997 239.4692 592.6133 238.7466 593.0205 cfU1 Ap0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa90.4482 620.5933 m90.4482 620.5342 90.4004 620.4858 90.3408 620.4858 C90.3408 620.4858 L90.2813 620.4858 90.2334 620.5342 90.2334 620.5933 C90.2334 620.8086 L90.2334 620.8682 90.2813 620.916 90.3408 620.916 C90.3408 620.916 L90.4004 620.916 90.4482 620.8682 90.4482 620.8086 C90.4482 620.5933 Lfu*u0 Ap1 D0 0 0 0 1 1 1 Xa68.1348 552.5522 m63.8892 552.5503 L63.3989 552.7749 L63.0742 552.918 60.8789 554.0146 58.8066 557.1309 c57.9639 558.3911 57.1592 559.9902 56.4922 561.9434 C45.9048 561.9434 L45.1729 559.644 44.2305 557.873 43.2295 556.52 c41.0181 553.5161 38.6045 552.73 38.2061 552.6343 C37.896 552.5522 L33.8647 552.5522 L32.8989 552.5503 32.1147 551.7661 32.1128 550.7983 C32.1128 504.9238 L32.1147 503.958 32.8989 503.1738 33.8647 503.1719 C68.1348 503.1719 L69.1006 503.1738 69.8848 503.958 69.8867 504.9238 C69.8867 550.7983 L69.8848 551.7661 69.1006 552.5503 68.1348 552.5522 Cf0 D66.833 512.3936 m66.833 510.9355 65.6504 509.7534 64.1924 509.7534 C37.498 509.7534 L36.0391 509.7534 34.8584 510.9355 34.8584 512.3936 C34.8584 536.5981 L34.8584 538.0566 36.0391 539.2383 37.498 539.2383 C64.1924 539.2383 L65.6504 539.2383 66.833 538.0566 66.833 536.5981 C66.833 512.3936 Lf*U*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa68.1348 557.5513 m65.1567 557.5513 L64.4995 558.0171 63.0615 559.2349 61.8452 561.9434 C62.9336 561.9434 L65.791 561.9434 68.1084 564.0698 68.1084 566.6924 C68.1084 579.5195 L68.1084 582.1421 65.791 584.2686 62.9336 584.2686 C39.2813 584.2686 L36.4238 584.2686 34.1074 582.1421 34.1074 579.5195 C34.1074 566.6924 L34.1074 564.0698 36.4238 561.9434 39.2813 561.9434 C40.5811 561.9434 L40.1362 560.9009 39.6582 560.1021 39.209 559.4932 c38.4858 558.5151 37.8184 557.9966 37.3794 557.7188 c37.2642 557.6475 37.1646 557.5928 37.0835 557.5513 C33.8647 557.5513 L30.1343 557.5493 27.1157 554.5293 27.1118 550.7983 C27.1118 504.9238 L27.1157 501.1929 30.1343 498.1729 33.8647 498.1729 C68.1348 498.1709 L71.8633 498.1729 74.8833 501.1929 74.8857 504.9238 C74.8857 550.7983 L74.8833 554.5293 71.8633 557.5493 68.1348 557.5513 Cf0 D38.8555 577.1826 m38.0264 577.1826 37.355 577.856 37.355 578.6831 c37.355 579.5122 38.0264 580.1836 38.8555 580.1836 C62.4995 580.1836 L63.3262 580.1836 63.9976 579.5122 63.9976 578.6831 c63.9976 577.856 63.3262 577.1826 62.4995 577.1826 C38.8555 577.1826 Lf69.8867 504.9238 m69.8848 503.958 69.1006 503.1738 68.1348 503.1719 C33.8647 503.1719 L32.8989 503.1738 32.1147 503.958 32.1128 504.9238 C32.1128 550.7983 L32.1147 551.7661 32.8989 552.5503 33.8647 552.5522 C37.896 552.5522 L38.2061 552.6343 L38.6045 552.73 41.0181 553.5161 43.2295 556.52 c44.2305 557.873 45.1729 559.644 45.9048 561.9434 C56.4922 561.9434 L57.1592 559.9902 57.9639 558.3911 58.8066 557.1309 c60.8789 554.0146 63.0742 552.918 63.3989 552.7749 C63.8892 552.5503 L68.1348 552.5522 L69.1006 552.5503 69.8848 551.7661 69.8867 550.7983 C69.8867 504.9238 Lf*U*u1 D64.1924 539.2383 m37.498 539.2383 L36.0391 539.2383 34.8584 538.0566 34.8584 536.5981 C34.8584 512.3936 L34.8584 510.9355 36.0391 509.7534 37.498 509.7534 C64.1924 509.7534 L65.6504 509.7534 66.833 510.9355 66.833 512.3936 C66.833 536.5981 L66.833 538.0566 65.6504 539.2383 64.1924 539.2383 Cf0 D60.499 520.5171 m40.8555 520.5171 L40.0269 520.5171 39.3545 521.189 39.3545 522.0156 c39.3545 522.8447 40.0269 523.5166 40.8555 523.5166 C60.499 523.5166 L61.3276 523.5166 61.998 522.8447 61.998 522.0156 c61.998 521.189 61.3276 520.5171 60.499 520.5171 Cf62.498 529.0122 m38.8555 529.0122 L38.0273 529.0122 37.3564 529.6836 37.3564 530.5117 c37.3564 531.3398 38.0273 532.0132 38.8555 532.0132 C62.498 532.0132 L63.3262 532.0132 63.9995 531.3398 63.9995 530.5117 c63.9995 529.6836 63.3262 529.0122 62.498 529.0122 Cf*U0 0 0 0 1 1 1 Xa62.498 532.0132 m38.8555 532.0132 L38.0273 532.0132 37.3564 531.3398 37.3564 530.5117 c37.3564 529.6836 38.0273 529.0122 38.8555 529.0122 C62.498 529.0122 L63.3262 529.0122 63.9995 529.6836 63.9995 530.5117 c63.9995 531.3398 63.3262 532.0132 62.498 532.0132 Cf60.499 523.5166 m40.8555 523.5166 L40.0269 523.5166 39.3545 522.8447 39.3545 522.0156 c39.3545 521.189 40.0269 520.5171 40.8555 520.5171 C60.499 520.5171 L61.3276 520.5171 61.998 521.189 61.998 522.0156 c61.998 522.8447 61.3276 523.5166 60.499 523.5166 Cf63.9976 578.6831 m63.9976 579.5122 63.3262 580.1836 62.4995 580.1836 C38.8555 580.1836 L38.0264 580.1836 37.355 579.5122 37.355 578.6831 c37.355 577.856 38.0264 577.1826 38.8555 577.1826 C62.4995 577.1826 L63.3262 577.1826 63.9976 577.856 63.9976 578.6831 cfUu553.835 532.9268 m553.7813 533.8311 553.334 534.5283 552.5732 535.1182 C552.5732 532.7817 L552.5732 531.0459 L553.3633 531.7231 553.8682 532.3667 553.835 532.9268 cn545.9561 510.4185 m546.0117 509.478 546.5781 508.5234 547.5732 507.5874 C547.5732 514.5679 L547.5732 514.6226 L546.542 513.4297 545.8594 512.0327 545.9561 510.4185 cn543.8076 554.2056 m544.2383 553.541 545.7793 552.6343 547.5732 551.7446 C547.5732 554.3286 L547.5732 557.1143 L545.4561 556.3774 543.7314 555.4058 543.8076 554.2056 Cn0 O0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa550.2617 581.6362 m552.9678 581.6362 555.1631 583.8301 555.1631 586.5371 c555.1631 589.2437 552.9678 591.438 550.2617 591.438 c547.5557 591.438 545.3623 589.2437 545.3623 586.5371 c545.3623 583.8301 547.5557 581.6362 550.2617 581.6362 cf552.5732 577.3433 m552.5732 578.7227 551.4531 579.8433 550.0732 579.8433 c548.6914 579.8433 547.5732 578.7227 547.5732 577.3433 C547.5732 572.9902 L549.2344 573.4497 550.9307 573.8115 552.5732 574.0171 C552.5732 577.3433 Lf*u1 D560.4365 498.8486 m560.7705 498.8311 561.0566 498.8228 561.292 498.8228 c562.6357 498.8228 562.373 499.0957 560.5518 499.5327 c558.334 500.0649 555.3857 500.8911 552.5732 502.0439 C552.5732 504.5254 L552.5732 514.5679 L552.5732 518.3086 L550.9453 517.4365 548.9492 516.2148 547.5732 514.6226 C547.5732 514.5679 L547.5732 507.5874 L547.5732 504.668 L545.3682 506.2012 543.8057 508.0615 543.6738 510.2822 c543.2695 517.0474 551.9707 520.4609 553.9072 521.5781 c555.4629 522.4746 564.4082 526.5669 564.5508 533.4541 c564.6943 540.3633 559.5459 543.4502 556.2686 545.4258 c555.7344 545.7476 554.3223 546.3125 552.5732 547.0278 C552.5732 549.502 L552.5732 554.3286 L552.5732 558.3101 L551.9014 558.229 551.2354 558.1304 550.6006 557.9795 c549.5996 557.7412 548.5449 557.4521 547.5732 557.1143 C547.5732 554.3286 L547.5732 551.7446 L547.5732 549.1943 L544.5166 550.6416 541.7959 552.272 541.5635 553.7271 c541.0713 556.8066 544.0596 558.7715 550.0713 560.2031 c552.7373 560.8379 555.5303 560.6885 557.6904 561.3457 c560.792 562.2896 563.251 564.5796 562.3896 567.8223 c561.5859 570.8447 558.8027 571.9233 555.3594 571.9233 c549.5439 571.9233 541.8467 568.8457 538.6279 566.8555 c533.708 563.8125 528.1396 557.9927 530.0342 551.1206 c531.5225 545.7266 540.624 542.2354 544.8008 540.5815 c545.6416 540.2485 546.5918 539.9531 547.5732 539.6523 C547.5732 537.2598 L547.5732 532.7817 L547.5732 527.7437 L547.749 527.8501 547.9287 527.9595 548.1025 528.064 c549.709 529.0308 551.4375 530.0732 552.5732 531.0459 C552.5732 532.7817 L552.5732 535.1182 L552.5732 537.8042 L554.5156 536.793 555.9785 535.3774 556.1162 533.0625 c556.4238 527.915 544.877 525.6323 539.8633 518.5361 c534.8486 511.4399 539.6377 504.1133 547.1455 501.2979 c547.2861 501.2451 547.4316 501.2036 547.5732 501.1533 C547.5732 498.7402 L547.5732 496.6333 L547.5732 495.9146 L547.5732 494.5352 548.6914 493.4141 550.0732 493.4141 c551.4531 493.4141 552.5732 494.5352 552.5732 495.9146 C552.5732 496.6333 L552.5732 497.4751 L552.5732 499.7969 L555.4893 499.2183 558.3096 498.9595 560.4365 498.8486 cf0 D554.2617 569.7632 m555.0537 569.7632 555.6943 569.1216 555.6943 568.3301 c555.6943 567.5391 555.0537 566.897 554.2617 566.897 c553.4707 566.897 552.8291 567.5391 552.8291 568.3301 c552.8291 569.1216 553.4707 569.7632 554.2617 569.7632 cf*U0 0 0 0 1 1 1 Xa547.1455 501.2979 m539.6377 504.1133 534.8486 511.4399 539.8633 518.5361 c544.877 525.6323 556.4238 527.915 556.1162 533.0625 c555.9785 535.3774 554.5156 536.793 552.5732 537.8042 C552.5732 535.1182 L553.334 534.5283 553.7813 533.8311 553.835 532.9268 c553.8682 532.3667 553.3633 531.7231 552.5732 531.0459 c551.4375 530.0732 549.709 529.0308 548.1025 528.064 c547.9287 527.9595 547.749 527.8501 547.5732 527.7437 c544.1963 525.7075 540.4824 523.3745 537.9971 519.855 c535.5967 516.459 534.917 512.7515 536.0303 509.1333 c537.3594 504.8101 541.2158 501.0806 546.3428 499.1577 c546.7471 499.0063 547.1611 498.875 547.5732 498.7402 C547.5732 501.1533 L547.4316 501.2036 547.2861 501.2451 547.1455 501.2979 cf544.8008 540.5815 m540.624 542.2354 531.5225 545.7266 530.0342 551.1206 c528.1396 557.9927 533.708 563.8125 538.6279 566.8555 c541.8467 568.8457 549.5439 571.9233 555.3594 571.9233 c558.8027 571.9233 561.5859 570.8447 562.3896 567.8223 c563.251 564.5796 560.792 562.2896 557.6904 561.3457 c555.5303 560.6885 552.7373 560.8379 550.0713 560.2031 c544.0596 558.7715 541.0713 556.8066 541.5635 553.7271 c541.7959 552.272 544.5166 550.6416 547.5732 549.1943 C547.5732 551.7446 L545.7793 552.6343 544.2383 553.541 543.8076 554.2056 C543.7314 555.4058 545.4561 556.3774 547.5732 557.1143 c548.5449 557.4521 549.5996 557.7412 550.6006 557.9795 c551.2354 558.1304 551.9014 558.229 552.5732 558.3101 c553.0898 558.3726 553.6094 558.4258 554.1211 558.4746 c555.542 558.6099 557.0098 558.7495 558.3555 559.1592 c563.1709 560.6245 565.6787 564.3418 564.5986 568.4092 c564.0225 570.5757 562.0566 574.209 555.3594 574.209 c554.4639 574.209 553.5273 574.1367 552.5732 574.0171 c550.9307 573.8115 549.2344 573.4497 547.5732 572.9902 c543.4561 571.8506 539.5801 570.1313 537.4258 568.7993 c531.3799 565.0601 525.6855 558.293 527.8311 550.5127 c529.5908 544.1372 538.7568 540.5132 543.6807 538.5664 C543.96 538.4565 L544.9375 538.0693 546.0303 537.7344 547.0859 537.4106 c547.252 537.3599 547.4121 537.3101 547.5732 537.2598 C547.5732 539.6523 L546.5918 539.9531 545.6416 540.2485 544.8008 540.5815 cf561.085 501.7554 m557.7695 502.5508 554.9014 503.4956 552.5732 504.5254 C552.5732 502.0439 L555.3857 500.8911 558.334 500.0649 560.5518 499.5327 c562.373 499.0957 562.6357 498.8228 561.292 498.8228 c561.0566 498.8228 560.7705 498.8311 560.4365 498.8486 c558.3096 498.9595 555.4893 499.2183 552.5732 499.7969 C552.5732 497.4751 L555.418 496.9385 558.1563 496.6787 560.3174 496.5659 c560.6992 496.5464 561.0244 496.5371 561.292 496.5371 c563.6572 496.5371 564.292 497.7056 564.4082 498.6865 c564.6689 500.8955 562.3379 501.4546 561.085 501.7554 cf556.2686 545.4258 m559.5459 543.4502 564.6943 540.3633 564.5508 533.4541 c564.4082 526.5669 555.4629 522.4746 553.9072 521.5781 c551.9707 520.4609 543.2695 517.0474 543.6738 510.2822 c543.8057 508.0615 545.3682 506.2012 547.5732 504.668 C547.5732 507.5874 L546.5781 508.5234 546.0117 509.478 545.9561 510.4185 c545.8594 512.0327 546.542 513.4297 547.5732 514.6226 c548.9492 516.2148 550.9453 517.4365 552.5732 518.3086 c553.0723 518.5762 553.541 518.8149 553.9404 519.0166 c554.3955 519.2466 554.7549 519.4282 555.0498 519.5981 c555.1729 519.6694 555.3525 519.7642 555.5732 519.8823 c558.3203 521.3467 566.6787 525.8027 566.8359 533.4067 c567.0068 541.6206 560.8057 545.3599 557.4736 547.3687 c556.8486 547.7451 555.8506 548.1582 553.9912 548.9175 c553.625 549.0669 553.1318 549.2686 552.5732 549.502 C552.5732 547.0278 L554.3223 546.3125 555.7344 545.7476 556.2686 545.4258 cf554.2617 566.897 m555.0537 566.897 555.6943 567.5391 555.6943 568.3301 c555.6943 569.1216 555.0537 569.7632 554.2617 569.7632 c553.4707 569.7632 552.8291 569.1216 552.8291 568.3301 c552.8291 567.5391 553.4707 566.897 554.2617 566.897 cfUu0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa391.459 329.5811 m391.9883 329.5811 392.502 329.8633 392.7754 330.3604 c393.1729 331.0869 392.9082 331.999 392.1816 332.3965 C375.083 341.7783 L374.3594 342.1758 373.4453 341.9092 373.0469 341.1826 c372.6494 340.458 372.9141 339.5459 373.6406 339.1465 C390.7393 329.7676 L390.9678 329.6416 391.2148 329.5811 391.459 329.5811 cf394.2627 336.7715 m394.793 337.4063 394.707 338.3525 394.0732 338.8848 C383.1211 348.0293 L382.4844 348.5596 381.5371 348.4746 381.0068 347.8379 c380.4766 347.2041 380.5615 346.2568 381.1982 345.7246 C392.1514 336.5801 L392.4307 336.3457 392.7715 336.2314 393.1094 336.2314 c393.5391 336.2314 393.9658 336.415 394.2627 336.7715 cf374.4131 331.8418 m373.6221 332.082 372.7842 331.6338 372.543 330.8418 c372.3037 330.0488 372.751 329.2109 373.5449 328.9697 C387.4805 324.7471 L387.626 324.7031 387.7725 324.6826 387.916 324.6826 c388.5605 324.6826 389.1553 325.1006 389.3516 325.749 c389.5908 326.541 389.1436 327.3799 388.3516 327.6201 C374.4131 331.8418 Lf395.125 378.3076 m412.2197 368.9297 L412.4502 368.8047 412.6973 368.7451 412.9414 368.7451 c413.4717 368.7451 413.9854 369.0264 414.2578 369.5234 c414.6563 370.25 414.3906 371.1611 413.6641 371.5596 C396.5674 380.9375 L395.8408 381.335 394.9297 381.0703 394.5313 380.3438 c394.1328 379.6172 394.3984 378.7061 395.125 378.3076 Cf392.4785 374.9785 m391.9395 374.3486 392.0117 373.4014 392.6396 372.8613 C403.6914 363.3799 L403.9746 363.1357 404.3223 363.0166 404.668 363.0166 c405.0898 363.0166 405.5098 363.1943 405.8066 363.541 c406.3477 364.1699 406.2754 365.1172 405.6475 365.6563 C394.5957 375.1387 L393.9648 375.6797 393.0176 375.6074 392.4785 374.9785 cf370.8564 293.5273 m353.7607 302.9082 L353.0352 303.3057 352.123 303.04 351.7256 302.3145 c351.3262 301.5889 351.5918 300.6768 352.3184 300.2773 C369.415 290.8984 L369.6445 290.7725 369.8916 290.7119 370.1357 290.7119 c370.665 290.7119 371.1787 290.9941 371.4502 291.4922 c371.8496 292.2178 371.584 293.1299 370.8564 293.5273 Cf355.1465 306.9277 m354.9082 306.1338 355.3555 305.2969 356.1475 305.0566 C370.084 300.834 L370.2295 300.79 370.376 300.7695 370.5205 300.7695 c371.1641 300.7695 371.7598 301.1865 371.9561 301.835 c372.1963 302.627 371.7471 303.4639 370.9551 303.7041 C357.0186 307.9287 L356.2246 308.167 355.3867 307.7197 355.1465 306.9277 cf352.4756 306.8047 m354.2363 308.7246 356.3584 309.9414 359.0918 310.9277 c361.8027 311.8906 365.0898 312.502 368.8027 313.0996 C368.791 313.127 368.7813 313.1504 368.7695 313.1758 c368.4355 313.9395 368.0947 314.7188 367.7451 315.5234 c367.2881 316.5928 366.9277 317.6992 366.6191 318.8262 C363.2695 318.2686 360.0898 317.6309 357.1016 316.5898 c354.9287 315.8428 352.8438 314.8203 350.9492 313.4443 c349.5273 312.4531 348.3643 311.3496 347.4395 310.2695 c345.248 307.7109 344.3457 305.3184 344.2275 304.9883 C343.9307 304.3125 343.666 303.6396 343.4629 302.959 c343.1484 301.9063 343.2559 299.8398 345.5928 299.1309 c347.0313 298.6953 348.707 299.6689 349.1514 301.0576 c349.4434 301.9648 349.834 302.8916 350.3516 303.8496 c350.3916 303.9219 350.4131 303.999 350.4463 304.0723 C351.1445 305.3438 351.915 306.2813 352.458 306.8516 C352.4629 306.835 352.4707 306.8203 352.4756 306.8047 Cf375.9863 316.3848 m375.9063 316.6191 375.8164 316.8613 375.709 317.1133 c373.3477 322.5723 371.1719 327.2109 370.2402 331.2549 c369.3291 335.3271 369.4492 338.5918 371.5146 342.4268 c371.5547 342.5 371.5762 342.5762 371.6094 342.6494 C372.3076 343.918 373.0781 344.8574 373.6211 345.4268 C373.625 345.4111 373.6328 345.3965 373.6387 345.3828 C375.3984 347.3018 377.5215 348.5176 380.2539 349.5039 c382.9668 350.4668 386.252 351.0791 389.9658 351.6768 C389.9541 351.7031 389.9434 351.7266 389.9316 351.752 c389.5977 352.5156 389.2578 353.2949 388.9082 354.0996 c388.4512 355.1689 388.0898 356.2754 387.7813 357.4023 C384.4316 356.8457 381.2529 356.209 378.2656 355.166 c376.0918 354.4199 374.0059 353.3965 372.1113 352.0205 c370.6904 351.0293 369.5273 349.9258 368.6025 348.8457 c366.4102 346.2871 365.5078 343.8945 365.3896 343.5645 C363.3613 338.9541 363.3379 334.2783 364.3965 329.8887 c365.4629 325.377 367.4805 320.9805 369.5576 316.2168 C369.5244 316.2012 L371.8877 310.7441 374.0605 306.1055 374.9902 302.0625 c375.9043 297.9893 375.7832 294.7266 373.7188 290.8887 c373.6982 290.8516 373.6885 290.8125 373.6699 290.7734 c373.5645 290.5547 373.1523 289.8203 372.4414 288.8574 c371.3574 287.3867 371.666 285.3701 372.8779 284.498 c374.1582 283.5742 376.1426 283.8604 376.998 284.8652 c378.0273 286.0742 378.75 287.2656 379.6035 289.2207 c381.8701 294.002 381.9336 298.8691 380.834 303.4258 c379.8242 307.7148 377.9531 311.8926 375.9863 316.3848 Cf420.7109 373.2598 m419.2715 373.6973 417.5967 372.7217 417.1514 371.335 c416.8594 370.4258 416.4688 369.5 415.9512 368.541 c415.9121 368.4688 415.8896 368.3926 415.8564 368.3184 C415.1582 367.0469 414.3877 366.1104 413.8457 365.541 C413.8398 365.5566 413.832 365.5703 413.8271 365.5859 C412.0674 363.667 409.9443 362.4512 407.2109 361.4629 c404.5 360.501 401.2129 359.8887 397.5 359.29 C397.5117 359.2656 397.5215 359.2412 397.5332 359.2158 c397.8672 358.4521 398.209 357.6729 398.5586 356.8672 c399.0146 355.7998 399.376 354.6924 399.6855 353.5654 C403.0352 354.123 406.2129 354.7598 409.2012 355.8008 c411.374 356.5469 413.459 357.5723 415.3535 358.9473 c416.7754 359.9395 417.9385 361.042 418.8633 362.1211 c421.0547 364.6797 421.957 367.0723 422.0762 367.4023 C422.373 368.0781 422.6387 368.7539 422.8398 369.4336 c423.1543 370.4844 423.0469 372.5527 420.7109 373.2598 cf396.2578 357.2627 m396.252 357.2598 L394.1465 362.0742 392.2793 366.2393 391.4355 369.9063 c390.5215 373.9805 390.6426 377.2441 392.707 381.0811 C392.7285 381.1172 392.7373 381.1582 392.7559 381.1953 c392.8613 381.416 393.2744 382.1484 393.9844 383.1113 c395.0693 384.582 394.7598 386.5986 393.5488 387.4727 c392.2676 388.3945 390.2842 388.1094 389.4277 387.1045 c388.3984 385.8955 387.6758 384.7051 386.8232 382.75 c384.5557 377.9668 384.4922 373.1016 385.5918 368.543 c386.7637 363.5645 389.0977 358.7363 391.3916 353.3936 C391.3965 353.3945 L393.501 348.5801 395.3691 344.416 396.2129 340.749 c397.127 336.6758 397.0059 333.4121 394.9414 329.5742 c394.9219 329.5371 394.9121 329.498 394.8936 329.4609 c394.7529 329.1699 394.1211 327.9414 392.834 326.5791 C392.8291 326.5938 392.8213 326.6055 392.8174 326.6191 C391.0566 324.7021 388.9336 323.4863 386.2012 322.498 c383.4902 321.5361 380.2031 320.9238 376.4922 320.3262 C376.4961 320.3154 376.5 320.3057 376.5039 320.2949 C376.8438 319.5176 377.1914 318.7227 377.5469 317.9014 c378.0039 316.833 378.3652 315.7266 378.6738 314.6016 C382.0234 315.1582 385.2031 315.7939 388.1914 316.8359 c390.4971 317.6289 392.7012 318.7314 394.6855 320.2354 C394.6982 320.2168 L396.1895 321.1982 397.8535 323.1543 v398.8818 324.3633 399.9727 325.9512 400.8252 327.9063 c403.0928 332.6895 403.1563 337.5547 402.0576 342.1133 c400.8848 347.0918 398.5518 351.9189 396.2578 357.2627 CfUu0 0 0 0 1 1 1 Xa207.7578 344.7119 m215.2446 337.9756 L225.2549 349.0986 L225.1963 349.4658 225.1577 349.8389 225.1577 350.2227 c225.1577 354.1563 228.3462 357.3467 232.2827 357.3467 c232.4102 357.3467 232.5347 357.334 232.6606 357.3271 C251.4209 378.1729 L243.9351 384.9092 L207.7578 344.7119 Lf228.1572 350.2227 m228.1611 347.9424 230.0049 346.1006 232.2827 346.0967 c234.5649 346.1006 236.4067 347.9424 236.4106 350.2227 c236.4067 352.5 234.5649 354.3438 232.2827 354.3477 c230.0049 354.3438 228.1611 352.5 228.1572 350.2227 cf*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa259.4023 388.7256 m253.1406 394.1895 L252.7998 394.4863 252.2578 394.4248 251.9316 394.0508 C247.2334 388.667 L245.4531 390.2695 L245.0317 390.6494 244.4922 390.832 243.9238 390.832 c243.083 390.832 242.1787 390.4326 241.499 389.6768 C202.7617 346.6348 L201.6211 345.3682 201.5439 343.5801 202.5859 342.6396 C205.4575 340.0557 L201.5811 335.6133 L201.2813 335.2705 201.2402 334.8184 201.4863 334.6035 C206.0078 330.6582 L206.2539 330.4443 206.6953 330.5459 206.9951 330.8906 C210.7993 335.249 L213.7275 332.6143 L214.1479 332.2354 214.6865 332.0527 215.2549 332.0527 c216.0952 332.0527 217.0005 332.4531 217.6816 333.209 C227.9263 344.5928 L228.0503 344.4961 228.1729 344.3994 228.3032 344.3115 C228.3032 325.2568 L222.2773 319.2305 L222.394 319.5205 222.4619 319.835 222.4619 320.166 c222.4619 321.5459 221.3423 322.665 219.9619 322.665 C187.1592 322.665 L185.7788 322.665 184.6597 321.5459 184.6597 320.166 c184.6597 318.7852 185.7788 317.6641 187.1592 317.6641 C202.7974 317.6641 L201.1665 317.0166 200.0098 315.4316 200.0098 313.5693 c200.0098 311.1338 201.9844 309.1572 204.4194 309.1572 C209.9683 309.1582 L209.9683 309.1465 209.9648 309.1357 209.9648 309.124 C209.9648 305.8945 L209.9648 304.6055 210.8721 303.5303 212.082 303.2656 C204.0347 302.7031 197.3706 299.4736 194.6025 295.0967 C193.2075 295.0967 L191.8271 295.0967 190.708 293.9775 190.708 292.5967 c190.708 291.2168 191.8271 290.0957 193.2075 290.0957 C235.9717 290.0957 L237.3521 290.0957 238.4731 291.2168 238.4731 292.5967 c238.4731 293.9775 237.3521 295.0967 235.9717 295.0967 C234.5791 295.0967 L231.751 299.5684 224.8574 302.8457 216.5767 303.3018 C217.7271 303.6074 218.5791 304.6475 218.5791 305.8945 C218.5791 309.124 L218.5791 309.1357 218.5757 309.1475 218.5757 309.1592 C222.854 309.1602 L224.0332 309.1602 225.1392 309.6191 225.9741 310.4512 C235.833 320.3105 L236.6528 321.1328 237.1245 322.2676 237.1245 323.4287 C237.1245 345.0029 L238.5273 346.3037 239.4102 348.1572 239.4102 350.2227 c239.4102 352.1348 238.6523 353.8672 237.4258 355.1475 C256.417 376.25 L257.5586 377.5176 257.6357 379.3057 256.5938 380.2441 C254.6318 382.0098 L259.4316 387.5098 L259.7559 387.8818 259.7441 388.4287 259.4023 388.7256 Cf0 D232.2827 354.3477 m234.5649 354.3438 236.4067 352.5 236.4106 350.2227 c236.4067 347.9424 234.5649 346.1006 232.2827 346.0967 c230.0049 346.1006 228.1611 347.9424 228.1572 350.2227 c228.1611 352.5 230.0049 354.3438 232.2827 354.3477 cf232.6606 357.3271 m232.5347 357.334 232.4102 357.3467 232.2827 357.3467 c228.3462 357.3467 225.1577 354.1563 225.1577 350.2227 c225.1577 349.8389 225.1963 349.4658 225.2549 349.0986 C215.2446 337.9756 L207.7578 344.7119 L243.9351 384.9092 L251.4209 378.1729 L232.6606 357.3271 Lf*UUu78.9517 308.1826 m76.1226 310.4619 71.3452 312.3066 63.8394 312.3887 c63.5527 312.3926 63.2705 312.3945 62.9941 312.3945 c59.7964 312.3965 56.5674 312.2051 53.4409 311.8955 C53.8423 306.4229 55.5796 300.4287 60.3135 296.3955 c63.9858 293.2529 67.6226 292.1475 70.9434 292.1357 c74.1055 292.1309 77.0117 293.1982 79.1484 294.6982 c81.3013 296.1797 82.5571 298.1299 82.7241 299.3584 c82.7954 299.7881 82.833 300.2334 82.833 300.6934 c82.8184 303.1631 81.7783 305.8936 78.9517 308.1826 cn0 O0 0 0 0 1 1 1 Xa42.0439 373.6016 m43.5391 373.6016 44.751 374.8135 44.751 376.3086 c44.751 377.8037 43.5391 379.0156 42.0439 379.0156 c40.5498 379.0156 39.3369 377.8037 39.3369 376.3086 c39.3369 374.8135 40.5498 373.6016 42.0439 373.6016 cf61.1787 379.0156 m59.6836 379.0156 58.4717 377.8037 58.4717 376.3086 c58.4717 374.8135 59.6836 373.6016 61.1787 373.6016 c62.6729 373.6016 63.8857 374.8135 63.8857 376.3086 c63.8857 377.8037 62.6729 379.0156 61.1787 379.0156 cf*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa82.084 312.0791 m78.127 315.2559 72.1738 317.2998 63.9004 317.3877 c63.6074 317.3916 63.3037 317.3936 62.9941 317.3936 c59.7637 317.3916 56.5308 317.209 53.4082 316.9141 C53.502 318.5898 53.6836 320.0684 53.8647 321.2207 c53.9077 321.4951 53.9497 321.7432 53.9917 321.9785 C57.9312 322.2266 62.9556 323.3857 68.0664 326.3018 c75.1118 330.3633 78.8979 336.7627 79.0249 336.9307 C79.54 337.7861 79.4766 338.8223 78.959 339.6016 C81.1968 343.71 83.208 349.5742 83.2061 357.3984 c83.2061 357.9248 83.1978 358.4619 83.1792 359.0068 c82.9063 368.2314 77.7798 373.2852 72.7554 375.6348 c70.625 376.6514 68.5156 377.2451 66.7344 377.5947 C66.1489 380.123 63.8828 382.0156 61.1787 382.0156 c58.0317 382.0156 55.4717 379.4551 55.4717 376.3086 c55.4717 373.1621 58.0317 370.6016 61.1787 370.6016 c63.7139 370.6016 65.8652 372.2637 66.6074 374.5547 C68.0967 374.2354 69.7944 373.7314 71.459 372.9287 c75.7817 370.7959 79.855 367.0303 80.1816 358.9033 c80.1987 358.3926 80.207 357.8936 80.207 357.3984 c80.2031 349.7871 78.1812 344.2988 76.0537 340.5674 C75.5264 340.3809 75.0542 340.0273 74.7427 339.5107 C74.7427 339.5127 L74.7427 339.5107 74.7139 339.4629 74.6157 339.3145 c73.9531 338.2646 70.5835 333.4766 65.5845 330.6426 c60.6025 327.7891 55.6553 326.9209 52.3589 326.9248 C51.9463 326.9248 L48.6313 326.9082 42.4863 327.8438 37.6372 330.6426 c34.7866 332.2676 32.4507 334.5137 30.8628 336.3516 c30.0688 337.2686 29.4585 338.0811 29.0542 338.6543 c28.8521 338.9395 28.7021 339.165 28.606 339.3145 c28.5083 339.4629 28.481 339.5127 28.479 339.5107 C28.1665 340.0293 27.6919 340.3838 27.1621 340.5693 C25.0352 344.2969 23.0181 349.8086 23.0146 357.3975 c23.0127 357.8906 23.0229 358.3916 23.0415 358.9023 c23.3662 367.0293 27.4375 370.7969 31.7622 372.9307 c33.4268 373.7334 35.125 374.2373 36.6147 374.5566 C37.3564 372.2646 39.5083 370.6016 42.0439 370.6016 c45.1909 370.6016 47.751 373.1621 47.751 376.3086 c47.751 379.4551 45.1909 382.0156 42.0439 382.0156 c39.3398 382.0156 37.0737 380.123 36.4883 377.5938 C34.7061 377.2441 32.5957 376.6514 30.4639 375.6338 c25.4414 373.2842 20.313 368.2324 20.0425 359.0059 c20.0234 358.4629 20.0132 357.9277 20.0132 357.3975 c20.0122 349.5742 22.0244 343.709 24.2627 339.6006 C23.7456 338.8213 23.6821 337.7861 24.1968 336.9307 C24.3237 336.7627 28.1104 330.3633 35.1553 326.3018 c39.8408 323.6455 44.9619 322.4795 48.9399 322.0879 C48.7012 320.5908 48.4619 318.6123 48.377 316.334 C42.4678 315.5381 37.2451 314.4385 33.5522 313.5586 C31.6436 316.8428 28.0967 319.0576 24.0229 319.0586 c17.9307 319.0566 12.9961 314.1221 12.9941 308.0313 c12.9961 301.9395 17.9307 297.0049 24.0229 297.0029 c30.1133 297.0049 35.0459 301.9395 35.0479 308.0313 c35.0479 308.2793 35.0269 308.5225 35.0107 308.7666 C38.4419 309.5752 43.1772 310.5605 48.4727 311.2998 C48.96 305.0986 50.9844 297.8545 57.0537 292.6045 c59.2803 290.6836 61.6133 289.3203 63.9463 288.4355 c66.2974 287.543 68.6484 287.1367 70.8916 287.1367 c70.9092 287.1367 70.9258 287.1367 70.9434 287.1367 c75.2227 287.1406 79.0728 288.543 82.019 290.6055 c84.9443 292.6836 87.0933 295.3896 87.6563 298.5361 c87.7734 299.2461 87.832 299.9658 87.832 300.6934 c87.8447 304.6318 86.043 308.915 82.084 312.0791 cf0 D63.8857 376.3086 m63.8857 374.8135 62.6729 373.6016 61.1787 373.6016 c59.6836 373.6016 58.4717 374.8135 58.4717 376.3086 c58.4717 377.8037 59.6836 379.0156 61.1787 379.0156 c62.6729 379.0156 63.8857 377.8037 63.8857 376.3086 cf39.3369 376.3086 m39.3369 377.8037 40.5498 379.0156 42.0439 379.0156 c43.5391 379.0156 44.751 377.8037 44.751 376.3086 c44.751 374.8135 43.5391 373.6016 42.0439 373.6016 c40.5498 373.6016 39.3369 374.8135 39.3369 376.3086 cf24.0229 302.0039 m20.6938 302.0107 18.0015 304.7041 17.9956 308.0313 c18.0015 311.3594 20.6938 314.0508 24.0229 314.0576 c27.3481 314.0508 30.04 311.3594 30.0464 308.0313 c30.04 304.7021 27.3481 302.0107 24.0229 302.0039 cf82.7241 299.3584 m82.5571 298.1299 81.3013 296.1797 79.1484 294.6982 c77.0117 293.1982 74.1055 292.1309 70.9434 292.1357 c67.6226 292.1475 63.9858 293.2529 60.3135 296.3955 c55.5796 300.4287 53.8423 306.4229 53.4409 311.8955 C56.5674 312.2051 59.7964 312.3965 62.9941 312.3945 c63.2705 312.3945 63.5527 312.3926 63.8394 312.3887 c71.3452 312.3066 76.1226 310.4619 78.9517 308.1826 c81.7783 305.8936 82.8184 303.1631 82.833 300.6934 c82.833 300.2334 82.7954 299.7881 82.7241 299.3584 cf*U*u1 D0 0 0 0 1 1 1 Xa30.0464 308.0313 m30.04 311.3594 27.3481 314.0508 24.0229 314.0576 c20.6938 314.0508 18.0015 311.3594 17.9956 308.0313 c18.0015 304.7041 20.6938 302.0107 24.0229 302.0039 c27.3481 302.0107 30.04 304.7021 30.0464 308.0313 cf0 D24.0225 305.3223 m22.5273 305.3223 21.3154 306.5352 21.3154 308.0303 c21.3154 309.5244 22.5273 310.7373 24.0225 310.7373 c25.5166 310.7373 26.7295 309.5244 26.7295 308.0303 c26.7295 306.5352 25.5166 305.3223 24.0225 305.3223 cf*U0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa24.0225 310.7373 m22.5273 310.7373 21.3154 309.5244 21.3154 308.0303 c21.3154 306.5352 22.5273 305.3223 24.0225 305.3223 c25.5166 305.3223 26.7295 306.5352 26.7295 308.0303 c26.7295 309.5244 25.5166 310.7373 24.0225 310.7373 cfUu*u1 D0 0 0 0 1 1 1 Xa567.1982 378.8076 m564.2197 374.0469 559.4463 366.416 554.543 358.5654 c546.5244 345.7295 538.1416 332.2715 536.8965 330.1572 c536.4063 329.3018 536.29 328.6123 536.2773 327.3867 c536.2744 326.3994 536.3936 325.1289 536.3936 323.5801 c536.4102 320.7734 535.915 317.1162 533.5586 312.6201 c531.0225 307.749 527.584 300.9287 524.6309 295.0283 C524.6318 295.0283 L528.3262 300.4736 532.5938 306.8086 535.6299 311.3984 c540.2549 318.5283 545.5498 319.8154 547.7393 321.2461 c548.4873 321.7266 548.9248 322.124 549.3496 322.8271 c550.5928 324.9365 558.2764 338.7666 565.5908 351.9727 c570.1025 360.1182 574.4854 368.0439 577.1846 372.9268 C567.1982 378.8076 Lf0 D563.333 352.1543 m551.332 330.8613 L550.9033 330.1309 549.9619 329.8867 549.2314 330.3184 C544.0039 333.3965 L543.2744 333.8262 543.0313 334.7656 543.4619 335.4961 C556.2627 356.3184 L556.6904 357.0479 557.6318 357.293 558.3623 356.8613 C562.7881 354.2559 L563.5186 353.8252 563.7617 352.8848 563.333 352.1543 Cf566.6963 360.8613 m565.7842 360.8613 564.8613 361.0967 564.0186 361.5938 c561.501 363.0752 560.665 366.3154 562.1455 368.832 c563.1318 370.5059 564.8955 371.4365 566.7061 371.4365 c567.6172 371.4365 568.54 371.2012 569.3818 370.7051 c571.8994 369.2236 572.7393 365.9824 571.2568 363.4678 c570.2715 361.793 568.5078 360.8613 566.6963 360.8613 cf*U*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa582.2705 383.001 m580.4229 384.0898 578.085 385.4658 Y577.7363 385.6709 L577.7305 385.6748 575.3945 387.0508 573.5391 388.1436 c572.6191 388.6914 571.6064 388.9766 570.6582 388.9707 c569.0898 388.9688 567.9229 388.2686 567.2227 387.6855 c566.5088 387.0918 566.1553 386.5547 566.0645 386.4209 C566.0225 386.3516 535.2471 337.209 532.5889 332.6982 c531.5059 330.8867 531.2656 328.9893 531.2764 327.3867 c531.2803 326.0596 531.3965 324.8506 531.3945 323.5801 c531.3799 321.3018 531.1006 318.7734 529.124 314.9268 c524.2539 305.5732 516.1592 289.2393 514.3623 285.6289 c513.9014 284.6992 513.6377 283.8193 513.6328 282.9023 c513.6055 281.793 514.1494 280.7002 514.7725 280.1484 c515.2393 279.7148 515.666 279.5137 515.9521 279.4102 C516.3145 279.2598 516.8047 279.127 517.4248 279.1211 c517.4492 279.1201 517.4727 279.1201 517.4971 279.1201 c518.8965 279.1201 520.4355 280.0264 521.4414 281.5244 c523.8105 284.8809 533.9834 299.8477 539.8008 308.6406 c542.4873 312.6504 544.7402 314.0283 546.9551 315.1973 c548.0693 315.7783 549.2148 316.2734 550.4004 317.0127 c551.5752 317.7422 552.7871 318.793 553.6572 320.2891 c556.3145 324.8037 584.2783 375.4258 584.293 375.4512 C584.4004 375.6885 584.9824 376.709 585.0049 378.3574 C585.0811 379.791 584.2334 381.9258 582.2705 383.001 cf0 D549.3496 322.8271 m548.9248 322.124 548.4873 321.7266 547.7393 321.2461 c545.5498 319.8154 540.2549 318.5283 535.6299 311.3984 c532.5938 306.8086 528.3262 300.4736 524.6318 295.0283 C524.6309 295.0283 L527.584 300.9287 531.0225 307.749 533.5586 312.6201 c535.915 317.1162 536.4102 320.7734 536.3936 323.5801 c536.3936 325.1289 536.2744 326.3994 536.2773 327.3867 c536.29 328.6123 536.4063 329.3018 536.8965 330.1572 c538.1416 332.2715 546.5244 345.7295 554.543 358.5654 c559.4463 366.416 564.2197 374.0469 567.1982 378.8076 C577.1846 372.9268 L574.4854 368.0439 570.1025 360.1182 565.5908 351.9727 c558.2764 338.7666 550.5928 324.9365 549.3496 322.8271 cf*U0 0 0 0 1 1 1 Xa568.6709 364.9893 m568.9824 365.5166 569.0684 366.1309 568.915 366.7217 c568.7617 367.3125 568.3877 367.8096 567.8604 368.1191 c567.502 368.3301 567.1152 368.4365 566.7061 368.4365 c565.8848 368.4365 565.1465 368.0156 564.7305 367.3086 c564.0918 366.2227 564.4541 364.8184 565.54 364.1797 c565.8994 363.9678 566.2871 363.8613 566.6963 363.8613 c567.5176 363.8613 568.2559 364.2822 568.6709 364.9893 cf*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa569.3818 370.7051 m568.54 371.2012 567.6172 371.4365 566.7061 371.4365 c564.8955 371.4365 563.1318 370.5059 562.1455 368.832 c560.665 366.3154 561.501 363.0752 564.0186 361.5938 c564.8613 361.0967 565.7842 360.8613 566.6963 360.8613 c568.5078 360.8613 570.2715 361.793 571.2568 363.4678 c572.7393 365.9824 571.8994 369.2236 569.3818 370.7051 cf0 D564.7305 367.3086 m565.1465 368.0156 565.8848 368.4365 566.7061 368.4365 c567.1152 368.4365 567.502 368.3301 567.8604 368.1191 c568.3877 367.8096 568.7617 367.3125 568.915 366.7217 c569.0684 366.1309 568.9824 365.5166 568.6709 364.9893 c568.2559 364.2822 567.5176 363.8613 566.6963 363.8613 c566.2871 363.8613 565.8994 363.9678 565.54 364.1797 c564.4541 364.8184 564.0918 366.2227 564.7305 367.3086 cf*U562.7881 354.2559 m558.3623 356.8613 L557.6318 357.293 556.6904 357.0479 556.2627 356.3184 C543.4619 335.4961 L543.0313 334.7656 543.2744 333.8262 544.0039 333.3965 C549.2314 330.3184 L549.9619 329.8867 550.9033 330.1309 551.332 330.8613 C563.333 352.1543 L563.7617 352.8848 563.5186 353.8252 562.7881 354.2559 CfUu227.498 120.7715 m225.2305 117.2188 222.6514 113.2002 219.9688 109.0264 C230.7109 92.3242 242.6289 73.9326 Y242.6289 98.8379 L235.0898 109.5469 227.498 120.7715 Vf230.9902 156.6367 m227.5215 159.2383 223.5645 160.0674 220.9238 160.3145 c218.1787 160.6123 215.9883 160.46 214.6816 160.2891 c214.2422 160.2324 213.9043 160.1748 213.6777 160.1309 C211.1582 159.7314 207.9473 158.7939 205.0723 156.6367 c199.7451 152.6416 197.4814 144.917 203.7402 134.5293 c204.6094 133.0879 206.3516 130.3154 208.6367 126.7217 C211.4795 130.9736 214.0596 134.9102 216.1133 138.1592 C213.9766 141.6191 212.4824 144.2754 212.1309 145.4502 c210.9219 149.4814 212.625 151.5537 214.6865 152.5664 C214.7344 152.585 214.7813 152.5986 214.8291 152.6172 c217.6064 153.6523 219.959 153.1973 220.9766 152.8936 C223.2041 152.0352 225.2881 149.9727 223.9316 145.4502 c222.209 139.71 193.4336 98.8379 Y193.4336 73.9326 L227.3232 126.2344 232.3213 134.5293 v238.5811 144.917 236.3164 152.6416 230.9902 156.6367 cfUu*u1 D0 0 0 0 1 1 1 Xa80.5894 150.0225 m29.3848 150.0225 L27.1426 150.0195 25.3271 148.2051 25.3228 145.9619 C25.3228 97.3535 L25.3271 95.1104 27.1426 93.2949 29.3848 93.293 C80.5894 93.293 L82.8345 93.2949 84.6494 95.1123 84.6538 97.3535 C84.6538 145.9619 L84.6494 148.2031 82.8345 150.0195 80.5894 150.0225 Cf0 D73.0859 114.8594 m62.3311 114.8594 L62.3311 104.1025 L47.7969 104.1025 L47.7969 114.8594 L37.041 114.8594 L37.041 129.3926 L47.7969 129.3926 L47.7969 140.1475 L62.3311 140.1475 L62.3311 129.3926 L73.0859 129.3926 L73.0859 114.8594 Lf*U*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa80.5894 155.0244 m29.3848 155.0244 L24.3779 155.0225 20.3247 150.9668 20.3223 145.9619 C20.3223 97.3535 L20.3247 92.3486 24.3779 88.293 29.3848 88.291 C80.5894 88.291 L85.5967 88.293 89.6519 92.3457 89.6543 97.3535 C89.6543 145.9619 L89.6519 150.9688 85.5967 155.0225 80.5894 155.0244 Cf0 D84.6538 97.3535 m84.6494 95.1123 82.8345 93.2949 80.5894 93.293 C29.3848 93.293 L27.1426 93.2949 25.3271 95.1104 25.3228 97.3535 C25.3228 145.9619 L25.3271 148.2051 27.1426 150.0195 29.3848 150.0225 C80.5894 150.0225 L82.8345 150.0195 84.6494 148.2031 84.6538 145.9619 C84.6538 97.3535 Lf*U62.3311 140.1475 m47.7969 140.1475 L47.7969 129.3926 L37.041 129.3926 L37.041 114.8594 L47.7969 114.8594 L47.7969 104.1025 L62.3311 104.1025 L62.3311 114.8594 L73.0859 114.8594 L73.0859 129.3926 L62.3311 129.3926 L62.3311 140.1475 LfUuu0 0 0 0 1 1 1 Xa402.7539 148.791 m354.6426 148.791 L351.2383 148.791 348.4785 146.0313 348.4785 142.626 C348.4785 96.9561 L348.4785 93.5508 351.2383 90.791 354.6426 90.791 C402.7539 90.791 L406.1582 90.791 408.9199 93.5508 408.9199 96.9561 C408.9199 142.626 L408.9199 146.0313 406.1582 148.791 402.7539 148.791 Cf*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa402.7539 153.9912 m354.6426 153.9912 L348.376 153.9912 343.2783 148.8926 343.2783 142.626 C343.2783 96.9561 L343.2783 90.6895 348.376 85.5908 354.6426 85.5908 C402.7539 85.5908 L409.0215 85.5908 414.1201 90.6895 414.1201 96.9561 C414.1201 142.626 L414.1201 148.8926 409.0215 153.9912 402.7539 153.9912 Cf0 D408.9199 96.9561 m408.9199 93.5508 406.1582 90.791 402.7539 90.791 C354.6426 90.791 L351.2383 90.791 348.4785 93.5508 348.4785 96.9561 C348.4785 142.626 L348.4785 146.0313 351.2383 148.791 354.6426 148.791 C402.7539 148.791 L406.1582 148.791 408.9199 146.0313 408.9199 142.626 C408.9199 96.9561 Lf*UUu*u1 D380.8477 119.6055 m374.6777 119.5938 369.6875 114.6035 369.6758 108.4346 c369.6875 102.2637 374.6777 97.2715 380.8477 97.2588 c387.0186 97.2715 392.0098 102.2637 392.0205 108.4346 c392.0098 114.6035 387.0186 119.5938 380.8477 119.6055 cn0 D383.418 112.918 m373.0078 112.918 L374.5859 115.6455 377.5273 117.4941 380.8916 117.5 c383.4727 117.4961 385.8037 116.4014 387.4658 114.6621 C386.0889 112.7129 383.418 112.918 Yn*U*u1 D0 O0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa388.1455 121.3408 m388.1455 121.3418 L388.1426 121.3438 388.1396 121.3447 388.1367 121.3467 c387.9355 121.4609 387.7285 121.5654 387.5215 121.6699 c387.3672 121.748 387.2109 121.8223 387.0537 121.8955 c386.8096 122.0078 386.5645 122.1172 386.3125 122.2168 c386.04 122.3252 385.7637 122.4268 385.4834 122.5195 c385.3115 122.5762 385.1377 122.6279 384.9629 122.6787 c384.6797 122.7607 384.3936 122.834 384.1045 122.8994 c383.9912 122.9248 383.8799 122.9561 383.7646 122.9785 c383.3613 123.0596 382.9502 123.1191 382.5361 123.166 c382.418 123.1797 382.2998 123.1914 382.1807 123.2021 c381.7412 123.2422 381.2979 123.2695 380.8477 123.2695 c380.4453 123.2695 380.0488 123.2451 379.6563 123.209 c379.3359 123.1836 379.0205 123.1426 378.707 123.0977 c378.7002 123.0957 378.6924 123.0957 378.6855 123.0947 C378.6855 123.0947 378.6855 123.0938 V374.4258 122.4697 370.7529 120.0488 368.4756 116.6104 C368.4746 116.6104 L368.2695 116.2998 368.0762 115.9805 367.8945 115.6533 c367.8008 115.4863 367.7168 115.3145 367.6289 115.1426 c367.5215 114.9316 367.418 114.7178 367.3193 114.5 c367.2422 114.3271 367.165 114.1533 367.0938 113.9766 c366.9854 113.707 366.8867 113.4326 366.7939 113.1553 c366.751 113.0293 366.7021 112.9072 366.6631 112.7803 c366.542 112.3857 366.4414 111.9824 366.3535 111.5742 c366.3223 111.4326 366.2979 111.2881 366.2715 111.1436 c366.2139 110.835 366.166 110.5225 366.1289 110.207 c366.1123 110.0684 366.0938 109.9297 366.0811 109.7891 c366.04 109.3418 366.0127 108.8916 366.0127 108.4346 c366.0127 108.0811 366.041 107.7363 366.0645 107.3916 C366.0654 107.3926 L366.6025 99.6846 373.0068 93.5986 380.8477 93.5967 c389.043 93.5986 395.6836 100.2383 395.6846 108.4346 c395.6836 113.9727 392.6436 118.793 388.1455 121.3408 Cf0 D380.8477 97.2588 m374.6777 97.2715 369.6875 102.2637 369.6758 108.4346 c369.6875 114.6035 374.6777 119.5938 380.8477 119.6055 c387.0186 119.5938 392.0098 114.6035 392.0205 108.4346 c392.0098 102.2637 387.0186 97.2715 380.8477 97.2588 cf*U378.2422 139.3906 m380.2627 140.749 380.0313 142.9521 378.7939 144.5137 c377.4395 146.2256 375.0244 146.7275 373.5195 145.7158 c372.1572 144.7969 371.8076 142.4238 372.9697 140.5908 c374.1543 138.7188 376.1738 137.9971 378.2422 139.3906 cf363.8926 112.8115 m362.9287 111.3643 359.1387 105.8857 355.96 98.6602 C360.2822 101.8252 364.0146 105.3438 V363.8184 106.3779 363.7051 107.4395 363.7051 108.5283 c363.7051 110.2793 363.9717 111.9688 364.4658 113.5605 C364.2549 113.3076 364.0566 113.0557 363.8926 112.8115 cf373.0078 112.918 m383.418 112.918 L386.0889 112.7129 387.4658 114.6621 V385.8037 116.4014 383.4727 117.4961 380.8916 117.5 c377.5273 117.4941 374.5859 115.6455 373.0078 112.918 Cf375.3262 131.5137 m375.9072 130.0117 376.9258 127.4648 377.7959 125.3018 C378.7588 125.4707 379.7422 125.5762 380.752 125.5762 c383.1992 125.5762 385.5215 125.0488 387.626 124.1172 C386.501 128.7344 384.3916 132.0918 Y389.5566 131.209 390.2773 122.6611 V390.2783 122.6602 390.2793 122.6602 Y390.3125 122.0498 390.3604 121.0137 390.3799 119.8594 C390.9199 120.8789 391.2852 122.165 V392.165 124.8828 392.8359 129.6416 388.9551 133.7871 c384.7393 138.291 380.1357 138.0889 377.4502 137.3916 C374.9717 136.1533 374.1689 134.5 375.3262 131.5137 cfUUu*u1 D572.8057 100.5625 m557.7314 129.7051 L557.6787 157.9473 L557.9238 158.1787 558.8066 159.0098 558.8066 160.7295 c558.7852 162.6455 557.4482 164.1973 555.7822 164.2549 c555.7549 164.2559 555.7227 164.2568 555.6855 164.2559 c555.6836 164.2559 L555.666 164.2559 555.6475 164.2549 555.6289 164.2539 C541.6934 164.2188 L539.9805 164.2168 538.5908 162.6328 538.5811 160.6758 c538.5811 160.6426 538.5811 160.6133 538.582 160.5771 c538.6025 159.4678 539.0674 158.4854 539.7754 157.8525 C539.8271 129.6729 L524.8926 100.5166 L524.666 100.041 523.6191 97.8789 523.6074 95.0098 c523.6025 93.625 523.8701 92.0596 524.6426 90.5498 c526.3965 87.1152 529.8711 85.5488 534.3193 85.5566 C534.3311 85.5547 L548.6904 85.5898 L548.8496 85.583 L548.9053 85.582 548.9404 85.582 548.9473 85.582 C563.29 85.6191 L567.793 85.6045 571.3047 87.1855 573.0605 90.6602 c573.8164 92.1602 574.083 93.7129 574.0781 95.0908 c574.0684 97.9746 573.0107 100.1328 572.8057 100.5625 Cf0 D544.5371 158.4268 m552.8662 158.4424 L552.9209 128.2412 L568.6279 97.8779 L568.6348 97.8652 568.6445 97.8467 V568.6475 97.8389 568.6494 97.8369 568.6533 97.8262 C568.666 97.7998 568.6826 97.7637 568.7041 97.7139 c568.7051 97.7109 568.7051 97.7109 568.7051 97.709 c568.7266 97.6631 568.75 97.6045 568.7744 97.5459 C568.7803 97.5273 568.7871 97.5088 568.7959 97.4912 C568.8496 97.3525 568.9102 97.1807 568.9736 96.9824 C568.9805 96.957 568.9883 96.9307 568.9951 96.9033 c569.0273 96.8027 569.0557 96.6963 569.084 96.583 C569.085 96.5781 569.0859 96.5742 569.0869 96.5703 c569.1143 96.4619 569.1387 96.3477 569.1621 96.2305 c569.167 96.1982 569.1738 96.1641 569.1807 96.1318 c569.2012 96.0068 569.2197 95.8818 569.2363 95.749 C569.2363 95.7441 569.2363 95.7412 569.2373 95.7373 C569.251 95.6094 569.2588 95.4805 569.2646 95.3496 c569.2656 95.3154 569.2666 95.2783 569.2666 95.2412 c569.2695 95.1055 569.2676 94.9707 569.2578 94.8311 C569.2568 94.8232 569.2559 94.8164 569.2549 94.8105 C569.2471 94.6758 569.2275 94.5439 569.2051 94.4111 c569.1992 94.373 569.1914 94.3359 569.1836 94.2998 c569.1553 94.1592 569.1211 94.0215 569.0752 93.8848 C569.0732 93.8779 569.0703 93.874 569.0684 93.8672 C569.0244 93.7363 568.9688 93.6055 568.9053 93.4775 c568.8867 93.4414 568.8691 93.4072 568.8506 93.3711 c568.7803 93.2393 568.7021 93.1084 568.6104 92.9844 C568.6055 92.9775 568.6006 92.9717 568.5957 92.9668 C568.5068 92.8457 568.4023 92.7324 568.291 92.6191 c568.2588 92.5869 568.2266 92.5566 568.1924 92.5234 c568.0693 92.4092 567.9365 92.2979 567.7861 92.1924 C567.7842 92.1904 567.7822 92.1895 V567.458 91.9658 567.0645 91.7686 566.5977 91.6064 c566.5742 91.5986 566.5518 91.5869 566.5264 91.5801 c566.4287 91.5469 566.3193 91.5176 566.2148 91.4893 c566.1416 91.4678 566.0723 91.4443 565.9961 91.4248 c565.9355 91.4121 565.8701 91.4004 565.8096 91.3857 c565.6777 91.3564 565.5488 91.3252 565.4063 91.3018 c565.3916 91.2988 565.373 91.2959 565.3584 91.2949 c564.749 91.1904 564.0537 91.1318 563.2549 91.1309 c554.5029 91.1084 548.9512 91.0947 Y548.7021 91.1035 L543.1484 91.0889 534.3975 91.0693 v525.6455 91.0479 528.999 97.7881 Y544.5938 128.2295 L544.5371 158.4268 Lf*U538.5791 160.6514 m538.5791 160.6592 538.5811 160.668 538.5811 160.6758 c538.5811 160.6943 538.5801 160.7148 538.5811 160.7314 c538.5801 160.707 538.5791 160.6797 538.5791 160.6514 cf548.6943 95.1807 m548.749 95.1807 L548.8057 95.1787 L548.9951 95.1719 L563.248 95.208 L564.5439 95.2109 565.2715 95.3955 565.6357 95.5352 C565.6045 95.6523 565.5635 95.7744 565.5215 95.873 C565.5586 95.8027 L565.5293 95.8613 L565.5205 95.876 L565.5195 95.8789 565.5186 95.8809 V555.6025 115.2773 L542.0293 115.1572 L532.1152 95.8047 L532.0723 95.7041 532.0313 95.5801 531.999 95.459 C532.3652 95.3203 533.0898 95.1426 534.3906 95.1475 C548.6943 95.1807 Lf*u1 D0 0 0 0 1 1 1 Xa534.3975 91.0693 m543.1484 91.0889 548.7021 91.1035 Y548.9512 91.0947 L554.5029 91.1084 563.2549 91.1309 v564.0537 91.1318 564.749 91.1904 565.3584 91.2949 c565.373 91.2959 565.3916 91.2988 565.4063 91.3018 c565.5488 91.3252 565.6777 91.3564 565.8096 91.3857 c565.8701 91.4004 565.9355 91.4121 565.9961 91.4248 c566.0723 91.4443 566.1416 91.4678 566.2148 91.4893 c566.3193 91.5176 566.4287 91.5469 566.5264 91.5801 c566.5518 91.5869 566.5742 91.5986 566.5977 91.6064 c567.0645 91.7686 567.458 91.9658 567.7822 92.1895 C567.7842 92.1904 567.7852 92.1914 Y567.9365 92.2979 568.0693 92.4092 568.1924 92.5234 c568.2266 92.5566 568.2588 92.5869 568.291 92.6191 c568.4023 92.7324 568.5068 92.8457 568.5957 92.9668 C568.6006 92.9717 568.6055 92.9775 568.6104 92.9844 C568.7021 93.1084 568.7803 93.2393 568.8506 93.3711 c568.8691 93.4072 568.8867 93.4414 568.9053 93.4775 c568.9688 93.6055 569.0244 93.7363 569.0684 93.8672 C569.0703 93.874 569.0732 93.8779 569.0752 93.8848 C569.1211 94.0215 569.1553 94.1592 569.1836 94.2998 c569.1914 94.3359 569.1992 94.373 569.2051 94.4111 c569.2275 94.5439 569.2471 94.6758 569.2549 94.8105 C569.2559 94.8164 569.2568 94.8232 569.2578 94.8311 C569.2676 94.9707 569.2695 95.1055 569.2666 95.2412 c569.2666 95.2783 569.2656 95.3154 569.2646 95.3496 c569.2588 95.4805 569.251 95.6094 569.2373 95.7373 C569.2363 95.7412 569.2363 95.7441 569.2363 95.749 C569.2197 95.8818 569.2012 96.0068 569.1807 96.1318 c569.1738 96.1641 569.167 96.1982 569.1621 96.2305 c569.1387 96.3477 569.1143 96.4619 569.0869 96.5703 c569.0859 96.5742 569.085 96.5781 569.084 96.583 C569.0557 96.6963 569.0273 96.8027 568.9951 96.9033 c568.9883 96.9307 568.9805 96.957 568.9736 96.9824 C568.9102 97.1807 568.8496 97.3525 568.7959 97.4912 C568.7871 97.5088 568.7803 97.5273 568.7744 97.5459 C568.75 97.6045 568.7266 97.6631 568.7051 97.709 c568.7051 97.7109 568.7051 97.7109 568.7041 97.7139 c568.6826 97.7637 568.666 97.7998 568.6533 97.8262 C568.6494 97.8369 568.6475 97.8389 568.6445 97.8467 C568.6348 97.8652 568.6279 97.8779 Y552.9209 128.2412 L552.8662 158.4424 L544.5371 158.4268 L544.5938 128.2295 L528.999 97.7881 L525.6455 91.0479 534.3975 91.0693 vf0 D532.1152 95.8047 m542.0293 115.1572 L555.6025 115.2773 L565.5186 95.8809 L565.5195 95.8789 565.5205 95.876 Y565.5293 95.8613 L565.5586 95.8027 L565.5215 95.873 L565.5635 95.7744 565.6045 95.6523 565.6357 95.5352 C565.2715 95.3955 564.5439 95.2109 563.248 95.208 C548.9951 95.1719 L548.8057 95.1787 L548.749 95.1807 L548.6943 95.1807 L534.3906 95.1475 L533.0898 95.1426 532.3652 95.3203 531.999 95.459 C532.0313 95.5801 532.0723 95.7041 532.1152 95.8047 Cf*UUu*u1 D0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa390.6094 588.0688 m390.1973 588.0688 L390.1973 593.7656 L390.1973 595.146 389.0762 596.2656 387.6982 596.2656 c386.3154 596.2656 385.1982 595.146 385.1982 593.7656 C385.1982 588.0688 L366.0137 588.0688 L366.0137 593.7661 L366.0137 595.1465 364.8936 596.2651 363.5127 596.2651 c362.1328 596.2651 361.0117 595.1465 361.0117 593.7661 C361.0117 588.0688 L360.1836 588.0688 L354.9736 588.0688 350.7344 583.8301 350.7344 578.6191 C350.7344 539.2261 L350.7344 534.0156 354.9736 529.7769 360.1836 529.7769 C372.2051 529.7769 L372.1318 529.5703 372.084 529.3516 372.084 529.1196 C372.8242 523.7856 L372.8242 523.6992 372.8389 523.6167 372.8496 523.5332 C371.252 523.4482 369.9824 522.1387 369.9824 520.5215 C369.9824 512.3066 L369.9824 510.6348 371.3359 509.2793 373.0098 509.2793 C374.6006 509.2793 L374.6006 489.6357 L374.6006 488.4336 375.0186 487.459 375.5332 487.459 c376.0479 487.459 376.4658 488.4336 376.4658 489.6357 C376.4658 509.2793 L377.75 509.2793 L379.4219 509.2793 380.7793 510.6348 380.7793 512.3066 C380.7793 520.5215 L380.7793 521.9961 379.7227 523.2217 378.3262 523.4912 C378.3408 523.5879 378.3555 523.6846 378.3555 523.7856 C379.0938 529.1196 L379.0938 529.3516 379.0469 529.5703 378.9727 529.7769 C390.6094 529.7769 L395.8193 529.7769 400.0586 534.0156 400.0586 539.2261 C400.0586 578.6191 L400.0586 583.8301 395.8193 588.0688 390.6094 588.0688 Cf0 D395.0586 539.2261 m395.0586 536.769 393.0664 534.7769 390.6094 534.7769 C376.6943 534.7769 L376.8857 535.7861 377.4326 537.8345 378.9072 539.7769 C390.0586 539.7769 L390.0586 562.521 L360.7344 562.521 L360.7344 539.7769 L372.085 539.7769 L372.8984 538.5571 374.0752 536.5415 374.3252 534.7769 C360.1836 534.7769 L357.7266 534.7769 355.7344 536.769 355.7344 539.2261 C355.7344 578.6191 L355.7344 581.0762 357.7266 583.0688 360.1836 583.0688 C390.6094 583.0688 L393.0664 583.0688 395.0586 581.0762 395.0586 578.6191 C395.0586 539.2261 Lf*U*u1 D0 0 0 0 1 1 1 Xa390.6094 583.0688 m360.1836 583.0688 L357.7266 583.0688 355.7344 581.0762 355.7344 578.6191 C355.7344 539.2261 L355.7344 536.769 357.7266 534.7769 360.1836 534.7769 C374.3252 534.7769 L374.0752 536.5415 372.8984 538.5571 372.085 539.7769 C360.7344 539.7769 L360.7344 562.521 L390.0586 562.521 L390.0586 539.7769 L378.9072 539.7769 L377.4326 537.8345 376.8857 535.7861 376.6943 534.7769 C390.6094 534.7769 L393.0664 534.7769 395.0586 536.769 395.0586 539.2261 C395.0586 578.6191 L395.0586 581.0762 393.0664 583.0688 390.6094 583.0688 Cf0 D370.3936 565.7944 m361.9873 565.7944 L361.4346 565.7944 360.9863 566.2422 360.9883 566.7959 c360.9883 567.3472 361.4346 567.7949 361.9873 567.7949 C370.3936 567.7949 L370.9443 567.7949 371.3945 567.3472 371.3926 566.7935 c371.3926 566.2422 370.9443 565.7944 370.3936 565.7944 Cf370.3936 571.5884 m361.9873 571.5884 L361.4346 571.5884 360.9863 572.0361 360.9883 572.5894 c360.9883 573.1411 361.4346 573.5889 361.9873 573.5889 C370.3936 573.5869 L370.9443 573.5869 371.3945 573.1411 371.3926 572.5874 c371.3926 572.0361 370.9443 571.5884 370.3936 571.5884 Cf370.3975 577.3818 m370.3965 577.3818 370.3945 577.3818 370.3936 577.3818 C361.9873 577.3818 L361.4346 577.3818 360.9863 577.8301 360.9883 578.3813 c360.9883 578.9346 361.4346 579.3828 361.9873 579.3809 C370.3936 579.3809 L370.9443 579.3809 371.3945 578.9326 371.3926 578.3813 c371.3926 577.8291 370.9473 577.3818 370.3975 577.3818 cf*U0.670588 0.584314 0.545098 0.372549 0.301961 0.301961 0.301961 Xa370.3936 579.3809 m361.9873 579.3809 L361.4346 579.3828 360.9883 578.9346 360.9883 578.3813 c360.9863 577.8301 361.4346 577.3818 361.9873 577.3818 C370.3936 577.3818 L370.3945 577.3818 370.3965 577.3818 370.3975 577.3818 c370.9473 577.3818 371.3926 577.8291 371.3926 578.3813 c371.3945 578.9326 370.9443 579.3809 370.3936 579.3809 Cf370.3936 567.7949 m361.9873 567.7949 L361.4346 567.7949 360.9883 567.3472 360.9883 566.7959 c360.9863 566.2422 361.4346 565.7944 361.9873 565.7944 C370.3936 565.7944 L370.9443 565.7944 371.3926 566.2422 371.3926 566.7935 c371.3945 567.3472 370.9443 567.7949 370.3936 567.7949 Cf370.3936 573.5869 m361.9873 573.5889 L361.4346 573.5889 360.9883 573.1411 360.9883 572.5894 c360.9863 572.0361 361.4346 571.5884 361.9873 571.5884 C370.3936 571.5884 L370.9443 571.5884 371.3926 572.0361 371.3926 572.5874 c371.3945 573.1411 370.9443 573.5869 370.3936 573.5869 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF